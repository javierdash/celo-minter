"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddCeloNetworkButton = void 0;
var react_1 = __importDefault(require("react"));
var constants_1 = require("../constants");
var types_1 = require("../types");
var ethereum_1 = require("../utils/ethereum");
var CELO_PARAMS = {
    chainName: 'Celo',
    nativeCurrency: { name: 'Celo', symbol: 'CELO', decimals: 18 },
};
var ALFAJORES_PARAMS = {
    chainName: 'Alfajores Testnet',
    nativeCurrency: {
        name: 'Alfajores Celo',
        symbol: 'A-CELO',
        decimals: 18,
    },
};
var BAKLAVA_PARAMS = {
    chainName: 'Baklava Testnet',
    nativeCurrency: {
        name: 'Baklava Celo',
        symbol: 'B-CELO',
        decimals: 18,
    },
};
var params = (_a = {},
    _a[types_1.ChainId.Mainnet] = CELO_PARAMS,
    _a[types_1.ChainId.Alfajores] = ALFAJORES_PARAMS,
    _a[types_1.ChainId.Baklava] = BAKLAVA_PARAMS,
    _a);
var makeNetworkParams = function (info) {
    var _a, _b;
    return ({
        chainId: "0x".concat(info.chainId.toString(16)),
        chainName: (_a = params[info.chainId].chainName) !== null && _a !== void 0 ? _a : info.name,
        nativeCurrency: (_b = params[info.chainId].nativeCurrency) !== null && _b !== void 0 ? _b : CELO_PARAMS.nativeCurrency,
        rpcUrls: [info.rpcUrl],
        blockExplorerUrls: [info.explorer],
        iconUrls: ['future'],
    });
};
var NETWORKS = (_b = {},
    _b[types_1.ChainId.Mainnet] = constants_1.Mainnet,
    _b[types_1.ChainId.Alfajores] = constants_1.Alfajores,
    _b[types_1.ChainId.Baklava] = constants_1.Baklava,
    _b);
var AddCeloNetworkButton = function (_a) {
    var chainId = _a.chainId;
    var chainParams = params[chainId];
    return (react_1.default.createElement("button", { onClick: function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(0, ethereum_1.isEthereumPresent)()) {
                            throw new Error("Ethereum isn't available in this context. This component should be mounted");
                        }
                        return [4 /*yield*/, ((_a = (0, ethereum_1.getEthereum)()) === null || _a === void 0 ? void 0 : _a.request({
                                method: 'wallet_addEthereumChain',
                                params: [makeNetworkParams(NETWORKS[chainId])],
                            }))];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        }); }, className: "tw-flex tw-items-center tw-font-semibold tw-text-blue-500 dark:tw-text-blue-400 focus:tw-outline-none" },
        "Switch to the ",
        chainParams.chainName,
        " Network"));
};
exports.AddCeloNetworkButton = AddCeloNetworkButton;
//# sourceMappingURL=AddCeloNetworkButton.js.map