{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DowntimeSlasherWrapper = void 0;\n\nvar BaseSlasher_1 = require(\"./BaseSlasher\");\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n\nvar unpackInterval = function (interval) {\n  return [interval.start, interval.end];\n};\n/**\n * Contract handling slashing for Validator downtime using intervals.\n */\n\n\nvar DowntimeSlasherWrapper =\n/** @class */\nfunction (_super) {\n  __extends(DowntimeSlasherWrapper, _super);\n\n  function DowntimeSlasherWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Returns slashable downtime in blocks.\n     * @return The number of consecutive blocks before a Validator missing from IBFT consensus\n     * can be slashed.\n     */\n\n\n    _this.slashableDowntime = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.slashableDowntime, undefined, BaseWrapper_1.valueToInt);\n    /**\n     * Calculates and returns the signature bitmap for the specified interval.\n     * Similar to the parentSealBitmap of every block (where you have which validators were\n     * able to sign the previous block), this bitmap shows for that specific interval which\n     * validators signed at least one block\n     * @param interval First and last block of the interval.\n     * @return (string) The signature uptime bitmap for the specified interval.\n     * @dev startBlock and endBlock must be in the same epoch.\n     * @dev The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of\n     * the current block.\n     */\n\n    _this.getBitmapForInterval = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getBitmapForInterval, unpackInterval, BaseWrapper_1.solidityBytesToString);\n    /**\n     * Calculates and sets the signature bitmap for the specified interval.\n     * @param interval First and last block of the interval.\n     * @dev interval.start and interval.end must be in the same epoch.\n     * @return The signature bitmap for the specified interval.\n     */\n\n    _this.setBitmapForInterval = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setBitmapForInterval, unpackInterval);\n    /**\n     * Shows if the user already called the `setBitmapForInterval` for\n     * the specific interval.\n     * @param interval First and last block of the interval.\n     * @return True if the user already called the `setBitmapForInterval` for\n     * the specific interval.\n     */\n\n    _this.isBitmapSetForInterval = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isBitmapSetForInterval, unpackInterval);\n    _this.lastSlashedBlock = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lastSlashedBlock, undefined, BaseWrapper_1.valueToInt);\n    return _this;\n  }\n  /**\n   * Returns current configuration parameters.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.slashableDowntime(), this.slashingIncentives()])];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              slashableDowntime: res[0],\n              slashingIncentives: res[1]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the downtime slasher contract\n   * @return DowntimeSlasherConfig object\n   */\n\n\n  DowntimeSlasherWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getConfig()];\n\n          case 1:\n            config = _a.sent();\n            return [2\n            /*return*/\n            , __assign(__assign({}, config), {\n              slashableDowntime: (0, BaseWrapper_1.blocksToDurationString)(config.slashableDowntime)\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Calculates intervals which span `slashableDowntime` before provided block.\n   * @param block Block number to build intervals before.\n   * @param maximumLength Maximum length for any interval (limited by gas limit).\n   * @dev if block is undefined, latest will be used\n   * @return The signature bitmap for the specified interval.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.slashableDowntimeIntervalsBefore = function (block, maximumLength) {\n    if (maximumLength === void 0) {\n      maximumLength = 4000;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var window, end, intervals, epochNumber, firstBlock, start;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getSlashableDowntimeWindow(undefined, block)];\n\n          case 1:\n            window = _a.sent();\n            end = window.end;\n            intervals = [];\n            _a.label = 2;\n\n          case 2:\n            if (!(end > window.start)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.kit.getEpochNumberOfBlock(end)];\n\n          case 3:\n            epochNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.getFirstBlockNumberForEpoch(epochNumber)];\n\n          case 4:\n            firstBlock = _a.sent();\n            start = Math.max(window.start, end - maximumLength, firstBlock);\n            intervals.push({\n              start: start,\n              end: end\n            });\n            end = start - 1;\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [2\n            /*return*/\n            , intervals.reverse()];\n        }\n      });\n    });\n  };\n  /**\n   * Shows if the user already called the `setBitmapForInterval` for intervals.\n   * @param intervals First and last block of the interval.\n   * @return True if the user already called the `setBitmapForInterval` for intervals.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.isBitmapSetForIntervals = function (intervals) {\n    return __awaiter(this, void 0, void 0, function () {\n      var setArray;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all(intervals.map(function (interval) {\n              return _this.isBitmapSetForInterval(interval);\n            }))];\n\n          case 1:\n            setArray = _a.sent();\n            return [2\n            /*return*/\n            , !setArray.some(function (set) {\n              return !set;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Tests if the given validator or signer did not sign any blocks in the interval.\n   * @param address Address of the validator account or signer.\n   * @param interval First and last block of the interval.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.wasValidatorDownForInterval = function (address, interval) {\n    return __awaiter(this, void 0, void 0, function () {\n      var startSignerIndex;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.signerIndexAtBlock(address, interval.start)];\n\n          case 1:\n            startSignerIndex = _a.sent();\n            return [2\n            /*return*/\n            , this.contract.methods.wasDownForInterval(interval.start, interval.end, startSignerIndex).call()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent\n   * intervals.\n   * @param address Address of the validator account or signer.\n   * @param intervals\n   * @return True if the validator signature does not appear in any block within the window.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.wasValidatorDownForIntervals = function (address, intervals) {\n    return __awaiter(this, void 0, void 0, function () {\n      var downArray;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all(intervals.map(function (interval) {\n              return _this.wasValidatorDownForInterval(address, interval);\n            }))];\n\n          case 1:\n            downArray = _a.sent();\n            return [2\n            /*return*/\n            , downArray.every(function (down) {\n              return down;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent\n   * intervals.\n   * @param address Address of the validator account or signer.\n   * @param intervals A list of ordered intervals for which signature bitmaps have already been set.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.slashValidator = function (address, intervals) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signerIndices, prevEpochNumber, _i, intervals_1, interval, epochNumber, signerIndex, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (intervals.length === 0) {\n              throw new Error('intervals array should have at least one element');\n            }\n\n            signerIndices = [];\n            prevEpochNumber = -1;\n            _i = 0, intervals_1 = intervals;\n            _e.label = 1;\n\n          case 1:\n            if (!(_i < intervals_1.length)) return [3\n            /*break*/\n            , 5];\n            interval = intervals_1[_i];\n            return [4\n            /*yield*/\n            , this.kit.getFirstBlockNumberForEpoch(interval.start)];\n\n          case 2:\n            epochNumber = _e.sent();\n            if (!(epochNumber !== prevEpochNumber)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.signerIndexAtBlock(address, interval.start)];\n\n          case 3:\n            signerIndex = _e.sent();\n            signerIndices.push(signerIndex);\n            prevEpochNumber = epochNumber;\n            _e.label = 4;\n\n          case 4:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 5:\n            _b = (_a = this.slash).apply;\n            _c = [this];\n            _d = [[intervals.map(function (interval) {\n              return interval.start;\n            }), intervals.map(function (interval) {\n              return interval.end;\n            }), signerIndices]];\n            return [4\n            /*yield*/\n            , this.trailingSlashArgs(address, intervals[0].start)];\n\n          case 6:\n            return [2\n            /*return*/\n            , _b.apply(_a, _c.concat([__spreadArray.apply(void 0, _d.concat([_e.sent(), false]))]))];\n        }\n      });\n    });\n  };\n  /**\n   * Calculate the slashable downtime window with respect to a provided start/end block numbers and length.\n   * @param startBlock First block of the downtime. Determined from endBlock if not provided.\n   * @param endBlock Last block of the downtime. Determined from startBlock or grandparent of latest block if not provided.\n   * @param length Length of downtime. Determined from minimum slashable downtime if not provided.\n   */\n\n\n  DowntimeSlasherWrapper.prototype.getSlashableDowntimeWindow = function (startBlock, endBlock, length) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!!length) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.slashableDowntime()];\n\n          case 1:\n            length = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            if (!!endBlock) return [3\n            /*break*/\n            , 6];\n            if (!startBlock) return [3\n            /*break*/\n            , 3];\n            _a = startBlock + length - 1;\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.kit.connection.getBlockNumber()];\n\n          case 4:\n            _a = _b.sent() - 2; // latest grandparent\n\n            _b.label = 5;\n\n          case 5:\n            endBlock = _a; // latest grandparent\n\n            _b.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            , {\n              start: startBlock !== null && startBlock !== void 0 ? startBlock : endBlock - length + 1,\n              end: endBlock\n            }];\n        }\n      });\n    });\n  };\n\n  return DowntimeSlasherWrapper;\n}(BaseSlasher_1.BaseSlasher);\n\nexports.DowntimeSlasherWrapper = DowntimeSlasherWrapper;","map":{"version":3,"sources":["../../src/wrappers/DowntimeSlasher.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DowntimeSlasherWrapper = void 0;\nvar BaseSlasher_1 = require(\"./BaseSlasher\");\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\nvar unpackInterval = function (interval) { return [interval.start, interval.end]; };\n/**\n * Contract handling slashing for Validator downtime using intervals.\n */\nvar DowntimeSlasherWrapper = /** @class */ (function (_super) {\n    __extends(DowntimeSlasherWrapper, _super);\n    function DowntimeSlasherWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Returns slashable downtime in blocks.\n         * @return The number of consecutive blocks before a Validator missing from IBFT consensus\n         * can be slashed.\n         */\n        _this.slashableDowntime = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.slashableDowntime, undefined, BaseWrapper_1.valueToInt);\n        /**\n         * Calculates and returns the signature bitmap for the specified interval.\n         * Similar to the parentSealBitmap of every block (where you have which validators were\n         * able to sign the previous block), this bitmap shows for that specific interval which\n         * validators signed at least one block\n         * @param interval First and last block of the interval.\n         * @return (string) The signature uptime bitmap for the specified interval.\n         * @dev startBlock and endBlock must be in the same epoch.\n         * @dev The getParentSealBitmap precompile requires that startBlock must be within 4 epochs of\n         * the current block.\n         */\n        _this.getBitmapForInterval = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getBitmapForInterval, unpackInterval, BaseWrapper_1.solidityBytesToString);\n        /**\n         * Calculates and sets the signature bitmap for the specified interval.\n         * @param interval First and last block of the interval.\n         * @dev interval.start and interval.end must be in the same epoch.\n         * @return The signature bitmap for the specified interval.\n         */\n        _this.setBitmapForInterval = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setBitmapForInterval, unpackInterval);\n        /**\n         * Shows if the user already called the `setBitmapForInterval` for\n         * the specific interval.\n         * @param interval First and last block of the interval.\n         * @return True if the user already called the `setBitmapForInterval` for\n         * the specific interval.\n         */\n        _this.isBitmapSetForInterval = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isBitmapSetForInterval, unpackInterval);\n        _this.lastSlashedBlock = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lastSlashedBlock, undefined, BaseWrapper_1.valueToInt);\n        return _this;\n    }\n    /**\n     * Returns current configuration parameters.\n     */\n    DowntimeSlasherWrapper.prototype.getConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all([this.slashableDowntime(), this.slashingIncentives()])];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                slashableDowntime: res[0],\n                                slashingIncentives: res[1],\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @dev Returns human readable configuration of the downtime slasher contract\n     * @return DowntimeSlasherConfig object\n     */\n    DowntimeSlasherWrapper.prototype.getHumanReadableConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var config;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getConfig()];\n                    case 1:\n                        config = _a.sent();\n                        return [2 /*return*/, __assign(__assign({}, config), { slashableDowntime: (0, BaseWrapper_1.blocksToDurationString)(config.slashableDowntime) })];\n                }\n            });\n        });\n    };\n    /**\n     * Calculates intervals which span `slashableDowntime` before provided block.\n     * @param block Block number to build intervals before.\n     * @param maximumLength Maximum length for any interval (limited by gas limit).\n     * @dev if block is undefined, latest will be used\n     * @return The signature bitmap for the specified interval.\n     */\n    DowntimeSlasherWrapper.prototype.slashableDowntimeIntervalsBefore = function (block, maximumLength) {\n        if (maximumLength === void 0) { maximumLength = 4000; }\n        return __awaiter(this, void 0, void 0, function () {\n            var window, end, intervals, epochNumber, firstBlock, start;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getSlashableDowntimeWindow(undefined, block)];\n                    case 1:\n                        window = _a.sent();\n                        end = window.end;\n                        intervals = [];\n                        _a.label = 2;\n                    case 2:\n                        if (!(end > window.start)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.kit.getEpochNumberOfBlock(end)];\n                    case 3:\n                        epochNumber = _a.sent();\n                        return [4 /*yield*/, this.kit.getFirstBlockNumberForEpoch(epochNumber)];\n                    case 4:\n                        firstBlock = _a.sent();\n                        start = Math.max(window.start, end - maximumLength, firstBlock);\n                        intervals.push({ start: start, end: end });\n                        end = start - 1;\n                        return [3 /*break*/, 2];\n                    case 5: return [2 /*return*/, intervals.reverse()];\n                }\n            });\n        });\n    };\n    /**\n     * Shows if the user already called the `setBitmapForInterval` for intervals.\n     * @param intervals First and last block of the interval.\n     * @return True if the user already called the `setBitmapForInterval` for intervals.\n     */\n    DowntimeSlasherWrapper.prototype.isBitmapSetForIntervals = function (intervals) {\n        return __awaiter(this, void 0, void 0, function () {\n            var setArray;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(intervals.map(function (interval) { return _this.isBitmapSetForInterval(interval); }))];\n                    case 1:\n                        setArray = _a.sent();\n                        return [2 /*return*/, !setArray.some(function (set) { return !set; })];\n                }\n            });\n        });\n    };\n    /**\n     * Tests if the given validator or signer did not sign any blocks in the interval.\n     * @param address Address of the validator account or signer.\n     * @param interval First and last block of the interval.\n     */\n    DowntimeSlasherWrapper.prototype.wasValidatorDownForInterval = function (address, interval) {\n        return __awaiter(this, void 0, void 0, function () {\n            var startSignerIndex;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.signerIndexAtBlock(address, interval.start)];\n                    case 1:\n                        startSignerIndex = _a.sent();\n                        return [2 /*return*/, this.contract.methods\n                                .wasDownForInterval(interval.start, interval.end, startSignerIndex)\n                                .call()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent\n     * intervals.\n     * @param address Address of the validator account or signer.\n     * @param intervals\n     * @return True if the validator signature does not appear in any block within the window.\n     */\n    DowntimeSlasherWrapper.prototype.wasValidatorDownForIntervals = function (address, intervals) {\n        return __awaiter(this, void 0, void 0, function () {\n            var downArray;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all(intervals.map(function (interval) { return _this.wasValidatorDownForInterval(address, interval); }))];\n                    case 1:\n                        downArray = _a.sent();\n                        return [2 /*return*/, downArray.every(function (down) { return down; })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns true if the validator did not sign any blocks for the specified overlapping or adjacent\n     * intervals.\n     * @param address Address of the validator account or signer.\n     * @param intervals A list of ordered intervals for which signature bitmaps have already been set.\n     */\n    DowntimeSlasherWrapper.prototype.slashValidator = function (address, intervals) {\n        return __awaiter(this, void 0, void 0, function () {\n            var signerIndices, prevEpochNumber, _i, intervals_1, interval, epochNumber, signerIndex, _a, _b, _c, _d;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (intervals.length === 0) {\n                            throw new Error('intervals array should have at least one element');\n                        }\n                        signerIndices = [];\n                        prevEpochNumber = -1;\n                        _i = 0, intervals_1 = intervals;\n                        _e.label = 1;\n                    case 1:\n                        if (!(_i < intervals_1.length)) return [3 /*break*/, 5];\n                        interval = intervals_1[_i];\n                        return [4 /*yield*/, this.kit.getFirstBlockNumberForEpoch(interval.start)];\n                    case 2:\n                        epochNumber = _e.sent();\n                        if (!(epochNumber !== prevEpochNumber)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.signerIndexAtBlock(address, interval.start)];\n                    case 3:\n                        signerIndex = _e.sent();\n                        signerIndices.push(signerIndex);\n                        prevEpochNumber = epochNumber;\n                        _e.label = 4;\n                    case 4:\n                        _i++;\n                        return [3 /*break*/, 1];\n                    case 5:\n                        _b = (_a = this.slash).apply;\n                        _c = [this];\n                        _d = [[intervals.map(function (interval) { return interval.start; }),\n                                intervals.map(function (interval) { return interval.end; }),\n                                signerIndices]];\n                        return [4 /*yield*/, this.trailingSlashArgs(address, intervals[0].start)];\n                    case 6: return [2 /*return*/, _b.apply(_a, _c.concat([__spreadArray.apply(void 0, _d.concat([(_e.sent()), false]))]))];\n                }\n            });\n        });\n    };\n    /**\n     * Calculate the slashable downtime window with respect to a provided start/end block numbers and length.\n     * @param startBlock First block of the downtime. Determined from endBlock if not provided.\n     * @param endBlock Last block of the downtime. Determined from startBlock or grandparent of latest block if not provided.\n     * @param length Length of downtime. Determined from minimum slashable downtime if not provided.\n     */\n    DowntimeSlasherWrapper.prototype.getSlashableDowntimeWindow = function (startBlock, endBlock, length) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!!length) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.slashableDowntime()];\n                    case 1:\n                        length = _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        if (!!endBlock) return [3 /*break*/, 6];\n                        if (!startBlock) return [3 /*break*/, 3];\n                        _a = startBlock + length - 1;\n                        return [3 /*break*/, 5];\n                    case 3: return [4 /*yield*/, this.kit.connection.getBlockNumber()];\n                    case 4:\n                        _a = (_b.sent()) - 2; // latest grandparent\n                        _b.label = 5;\n                    case 5:\n                        endBlock = _a; // latest grandparent\n                        _b.label = 6;\n                    case 6: return [2 /*return*/, {\n                            start: startBlock !== null && startBlock !== void 0 ? startBlock : endBlock - length + 1,\n                            end: endBlock,\n                        }];\n                }\n            });\n        });\n    };\n    return DowntimeSlasherWrapper;\n}(BaseSlasher_1.BaseSlasher));\nexports.DowntimeSlasherWrapper = DowntimeSlasherWrapper;\n//# sourceMappingURL=DowntimeSlasher.js.map"]},"metadata":{},"sourceType":"script"}