{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimUncompressedPrefix = exports.ensureUncompressed = exports.ensureCompressed = exports.isCompressed = exports.computeSharedSecret = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar crypto_1 = require(\"crypto\");\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar secp256k1 = new elliptic_1.ec('secp256k1');\n\nfunction computeSharedSecret(privateKey, publicKey) {\n  var ecdh = (0, crypto_1.createECDH)('secp256k1');\n  ecdh.setPrivateKey(Buffer.from((0, address_1.trimLeading0x)(privateKey), 'hex'));\n  return ecdh.computeSecret(Buffer.from(ensureCompressed(publicKey), 'hex'));\n}\n\nexports.computeSharedSecret = computeSharedSecret;\n\nfunction isCompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n\n  if (noLeading0x.length === 64) {\n    return true;\n  }\n\n  return noLeading0x.length === 66 && (noLeading0x.startsWith('02') || noLeading0x.startsWith('03'));\n}\n\nexports.isCompressed = isCompressed;\n\nfunction ensureCompressed(publicKey) {\n  return secp256k1.keyFromPublic(ensureUncompressedPrefix(publicKey), 'hex').getPublic(true, 'hex');\n}\n\nexports.ensureCompressed = ensureCompressed;\n\nfunction ensureUncompressed(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n  var uncompressed = secp256k1.keyFromPublic(ensureUncompressedPrefix(noLeading0x), 'hex').getPublic(false, 'hex');\n  return uncompressed;\n}\n\nexports.ensureUncompressed = ensureUncompressed;\n\nfunction trimUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n\n  if (noLeading0x.length === 130 && noLeading0x.startsWith('04')) {\n    return noLeading0x.slice(2);\n  }\n\n  return noLeading0x;\n}\n\nexports.trimUncompressedPrefix = trimUncompressedPrefix;\n\nfunction ensureUncompressedPrefix(publicKey) {\n  var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n\n  if (noLeading0x.length === 128) {\n    return \"04\" + noLeading0x;\n  }\n\n  return noLeading0x;\n}","map":{"version":3,"sources":["../src/ecdh.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,SAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,SAAS,GAAG,IAAI,UAAA,CAAA,EAAJ,CAAO,WAAP,CAAlB;;AAEA,SAAgB,mBAAhB,CAAoC,UAApC,EAAwD,SAAxD,EAAyE;AACvE,MAAM,IAAI,GAAG,CAAA,GAAA,QAAA,CAAA,UAAA,EAAW,WAAX,CAAb;AACA,EAAA,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,IAAP,CAAY,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,UAAd,CAAZ,EAAuC,KAAvC,CAAnB;AACA,SAAO,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,IAAP,CAAY,gBAAgB,CAAC,SAAD,CAA5B,EAAyC,KAAzC,CAAnB,CAAP;AACD;;AAJD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAMA,SAAgB,YAAhB,CAA6B,SAA7B,EAA8C;AAC5C,MAAM,WAAW,GAAG,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,SAAd,CAApB;;AACA,MAAI,WAAW,CAAC,MAAZ,KAAuB,EAA3B,EAA+B;AAC7B,WAAO,IAAP;AACD;;AACD,SAAO,WAAW,CAAC,MAAZ,KAAuB,EAAvB,KAA8B,WAAW,CAAC,UAAZ,CAAuB,IAAvB,KAAgC,WAAW,CAAC,UAAZ,CAAuB,IAAvB,CAA9D,CAAP;AACD;;AAND,OAAA,CAAA,YAAA,GAAA,YAAA;;AAQA,SAAgB,gBAAhB,CAAiC,SAAjC,EAAkD;AAChD,SAAO,SAAS,CAAC,aAAV,CAAwB,wBAAwB,CAAC,SAAD,CAAhD,EAA6D,KAA7D,EAAoE,SAApE,CAA8E,IAA9E,EAAoF,KAApF,CAAP;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIA,SAAgB,kBAAhB,CAAmC,SAAnC,EAAoD;AAClD,MAAM,WAAW,GAAG,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,SAAd,CAApB;AACA,MAAM,YAAY,GAAG,SAAS,CAC3B,aADkB,CACJ,wBAAwB,CAAC,WAAD,CADpB,EACmC,KADnC,EAElB,SAFkB,CAER,KAFQ,EAED,KAFC,CAArB;AAGA,SAAO,YAAP;AACD;;AAND,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAQA,SAAgB,sBAAhB,CAAuC,SAAvC,EAAwD;AACtD,MAAM,WAAW,GAAG,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,SAAd,CAApB;;AACA,MAAI,WAAW,CAAC,MAAZ,KAAuB,GAAvB,IAA8B,WAAW,CAAC,UAAZ,CAAuB,IAAvB,CAAlC,EAAgE;AAC9D,WAAO,WAAW,CAAC,KAAZ,CAAkB,CAAlB,CAAP;AACD;;AACD,SAAO,WAAP;AACD;;AAND,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAQA,SAAS,wBAAT,CAAkC,SAAlC,EAAmD;AACjD,MAAM,WAAW,GAAG,CAAA,GAAA,SAAA,CAAA,aAAA,EAAc,SAAd,CAApB;;AACA,MAAI,WAAW,CAAC,MAAZ,KAAuB,GAA3B,EAAgC;AAC9B,WAAO,OAAK,WAAZ;AACD;;AACD,SAAO,WAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trimUncompressedPrefix = exports.ensureUncompressed = exports.ensureCompressed = exports.isCompressed = exports.computeSharedSecret = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar crypto_1 = require(\"crypto\");\nvar elliptic_1 = require(\"elliptic\");\nvar secp256k1 = new elliptic_1.ec('secp256k1');\nfunction computeSharedSecret(privateKey, publicKey) {\n    var ecdh = (0, crypto_1.createECDH)('secp256k1');\n    ecdh.setPrivateKey(Buffer.from((0, address_1.trimLeading0x)(privateKey), 'hex'));\n    return ecdh.computeSecret(Buffer.from(ensureCompressed(publicKey), 'hex'));\n}\nexports.computeSharedSecret = computeSharedSecret;\nfunction isCompressed(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    if (noLeading0x.length === 64) {\n        return true;\n    }\n    return noLeading0x.length === 66 && (noLeading0x.startsWith('02') || noLeading0x.startsWith('03'));\n}\nexports.isCompressed = isCompressed;\nfunction ensureCompressed(publicKey) {\n    return secp256k1.keyFromPublic(ensureUncompressedPrefix(publicKey), 'hex').getPublic(true, 'hex');\n}\nexports.ensureCompressed = ensureCompressed;\nfunction ensureUncompressed(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    var uncompressed = secp256k1\n        .keyFromPublic(ensureUncompressedPrefix(noLeading0x), 'hex')\n        .getPublic(false, 'hex');\n    return uncompressed;\n}\nexports.ensureUncompressed = ensureUncompressed;\nfunction trimUncompressedPrefix(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    if (noLeading0x.length === 130 && noLeading0x.startsWith('04')) {\n        return noLeading0x.slice(2);\n    }\n    return noLeading0x;\n}\nexports.trimUncompressedPrefix = trimUncompressedPrefix;\nfunction ensureUncompressedPrefix(publicKey) {\n    var noLeading0x = (0, address_1.trimLeading0x)(publicKey);\n    if (noLeading0x.length === 128) {\n        return \"04\" + noLeading0x;\n    }\n    return noLeading0x;\n}\n//# sourceMappingURL=ecdh.js.map"]},"metadata":{},"sourceType":"script"}