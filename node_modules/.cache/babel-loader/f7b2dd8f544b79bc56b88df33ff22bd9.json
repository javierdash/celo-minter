{"ast":null,"code":"var _jsxFileName = \"/Users/Lucy/PROYECTOS/celo-react-boilerplate/src/components/minter/nfts/Add.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\"; // basic attributes that can be added to NFT\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst COLORS = [\"Red\", \"Green\", \"Blue\", \"Cyan\", \"Yellow\", \"Purple\"];\nconst SHAPES = [\"Circle\", \"Square\", \"Triangle\"];\n\nconst AddNfts = _ref => {\n  _s();\n\n  let {\n    save,\n    address\n  } = _ref;\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\"); //store attributes of an NFT\n\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false); // check if all form data has been filled\n\n  const isFormFilled = () => name && ipfsImage && description && attributes.length > 2; // close the popup modal\n\n\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  }; // display the popup modal\n\n\n  const handleShow = () => setShow(true); // add an attribute to an NFT\n\n\n  const setAttributesFunc = (e, trait_type) => {\n    const {\n      value\n    } = e.target;\n    const attributeObject = {\n      trait_type,\n      value\n    };\n    const arr = attributes; // check if attribute already exists\n\n    const index = arr.findIndex(el => el.trait_type === trait_type);\n\n    if (index >= 0) {\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value\n      };\n      setAttributes(arr);\n      return;\n    } // add a new attribute\n\n\n    setAttributes(oldArray => [...oldArray, attributeObject]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleShow,\n      variant: \"dark\",\n      className: \"rounded-pill px-0\",\n      style: {\n        width: \"38px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"bi bi-plus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: show,\n      onHide: handleClose,\n      centered: true,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Create NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FloatingLabel, {\n            controlId: \"inputLocation\",\n            label: \"Name\",\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Name of NFT\",\n              onChange: e => {\n                setName(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FloatingLabel, {\n            controlId: \"inputDescription\",\n            label: \"Description\",\n            className: \"mb-3\",\n            children: /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              placeholder: \"description\",\n              style: {\n                height: \"80px\"\n              },\n              onChange: e => {\n                setDescription(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"file\",\n            className: \"mb-3\",\n            onChange: async e => {\n              const imageUrl = await uploadToIpfs(e);\n\n              if (!imageUrl) {\n                alert(\"failed to upload image\");\n                return;\n              }\n\n              setIpfsImage(imageUrl);\n            },\n            placeholder: \"Product name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \"Properties\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            className: \"mb-3\",\n            onChange: async e => {\n              setAttributesFunc(e, \"background\");\n            },\n            placeholder: \"Background\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              hidden: true,\n              children: \"Background\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this), COLORS.map(color => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: color.toLowerCase(),\n              children: color\n            }, `background-${color.toLowerCase()}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            className: \"mb-3\",\n            onChange: async e => {\n              setAttributesFunc(e, \"color\");\n            },\n            placeholder: \"NFT Color\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              hidden: true,\n              children: \"Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), COLORS.map(color => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: color.toLowerCase(),\n              children: color\n            }, `color-${color.toLowerCase()}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            as: \"select\",\n            className: \"mb-3\",\n            onChange: async e => {\n              setAttributesFunc(e, \"shape\");\n            },\n            placeholder: \"NFT Shape\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              hidden: true,\n              children: \"Shape\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), SHAPES.map(shape => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: shape.toLowerCase(),\n              children: shape\n            }, `shape-${shape.toLowerCase()}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"dark\",\n          disabled: !isFormFilled(),\n          onClick: () => {\n            save({\n              name,\n              ipfsImage,\n              description,\n              ownerAddress: address,\n              attributes\n            });\n            handleClose();\n          },\n          children: \"Create NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(AddNfts, \"lX+Ova3zKoUcbhwq7Z4JBWqTgXE=\");\n\n_c = AddNfts;\nAddNfts.propTypes = {\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired\n};\nexport default AddNfts;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddNfts\");","map":{"version":3,"sources":["/Users/Lucy/PROYECTOS/celo-react-boilerplate/src/components/minter/nfts/Add.js"],"names":["React","useState","PropTypes","Button","Modal","Form","FloatingLabel","uploadToIpfs","COLORS","SHAPES","AddNfts","save","address","name","setName","ipfsImage","setIpfsImage","description","setDescription","attributes","setAttributes","show","setShow","isFormFilled","length","handleClose","handleShow","setAttributesFunc","e","trait_type","value","target","attributeObject","arr","index","findIndex","el","oldArray","width","height","imageUrl","alert","map","color","toLowerCase","shape","ownerAddress","propTypes","func","isRequired","string"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,EAA8BC,aAA9B,QAAmD,iBAAnD;AACA,SAASC,YAAT,QAA6B,uBAA7B,C,CAEA;;;;AACA,MAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C,QAA3C,CAAf;AACA,MAAMC,MAAM,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,UAArB,CAAf;;AAEA,MAAMC,OAAO,GAAG,QAAuB;AAAA;;AAAA,MAAtB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsB;AACrC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,EAAD,CAA9C,CAHqC,CAKrC;;AACA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACoB,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,KAAD,CAAhC,CAPqC,CAUrC;;AACA,QAAMsB,YAAY,GAAG,MACjBV,IAAI,IAAIE,SAAR,IAAqBE,WAArB,IAAoCE,UAAU,CAACK,MAAX,GAAoB,CAD5D,CAXqC,CAcrC;;;AACA,QAAMC,WAAW,GAAG,MAAM;AACxBH,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAF,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAHD,CAfqC,CAoBrC;;;AACA,QAAMM,UAAU,GAAG,MAAMJ,OAAO,CAAC,IAAD,CAAhC,CArBqC,CAuBrC;;;AACA,QAAMK,iBAAiB,GAAG,CAACC,CAAD,EAAIC,UAAJ,KAAmB;AAC3C,UAAM;AAACC,MAAAA;AAAD,QAAUF,CAAC,CAACG,MAAlB;AACA,UAAMC,eAAe,GAAG;AACtBH,MAAAA,UADsB;AAEtBC,MAAAA;AAFsB,KAAxB;AAIA,UAAMG,GAAG,GAAGd,UAAZ,CAN2C,CAQ3C;;AACA,UAAMe,KAAK,GAAGD,GAAG,CAACE,SAAJ,CAAeC,EAAD,IAAQA,EAAE,CAACP,UAAH,KAAkBA,UAAxC,CAAd;;AAEA,QAAIK,KAAK,IAAI,CAAb,EAAgB;AAEd;AACAD,MAAAA,GAAG,CAACC,KAAD,CAAH,GAAa;AACXL,QAAAA,UADW;AAEXC,QAAAA;AAFW,OAAb;AAIAV,MAAAA,aAAa,CAACa,GAAD,CAAb;AACA;AACD,KApB0C,CAsB3C;;;AACAb,IAAAA,aAAa,CAAEiB,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcL,eAAd,CAAf,CAAb;AACD,GAxBD;;AA0BA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,OAAO,EAAEN,UADX;AAEE,MAAA,OAAO,EAAC,MAFV;AAGE,MAAA,SAAS,EAAC,mBAHZ;AAIE,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE;AAAT,OAJT;AAAA,6BAME;AAAG,QAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEjB,IAAb;AAAmB,MAAA,MAAM,EAAEI,WAA3B;AAAwC,MAAA,QAAQ,MAAhD;AAAA,8BACE,QAAC,KAAD,CAAO,MAAP;AAAc,QAAA,WAAW,MAAzB;AAAA,+BACE,QAAC,KAAD,CAAO,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,KAAD,CAAO,IAAP;AAAA,+BACE,QAAC,IAAD;AAAA,kCACE,QAAC,aAAD;AACE,YAAA,SAAS,EAAC,eADZ;AAEE,YAAA,KAAK,EAAC,MAFR;AAGE,YAAA,SAAS,EAAC,MAHZ;AAAA,mCAKE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,WAAW,EAAC,aAFd;AAGE,cAAA,QAAQ,EAAGG,CAAD,IAAO;AACfd,gBAAAA,OAAO,CAACc,CAAC,CAACG,MAAF,CAASD,KAAV,CAAP;AACD;AALH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,kBADF,eAeE,QAAC,aAAD;AACE,YAAA,SAAS,EAAC,kBADZ;AAEE,YAAA,KAAK,EAAC,aAFR;AAGE,YAAA,SAAS,EAAC,MAHZ;AAAA,mCAKE,QAAC,IAAD,CAAM,OAAN;AACE,cAAA,EAAE,EAAC,UADL;AAEE,cAAA,WAAW,EAAC,aAFd;AAGE,cAAA,KAAK,EAAE;AAAES,gBAAAA,MAAM,EAAE;AAAV,eAHT;AAIE,cAAA,QAAQ,EAAGX,CAAD,IAAO;AACfV,gBAAAA,cAAc,CAACU,CAAC,CAACG,MAAF,CAASD,KAAV,CAAd;AACD;AANH;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,kBAfF,eA8BE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,SAAS,EAAE,MAFb;AAGE,YAAA,QAAQ,EAAE,MAAOF,CAAP,IAAa;AACrB,oBAAMY,QAAQ,GAAG,MAAMjC,YAAY,CAACqB,CAAD,CAAnC;;AACA,kBAAI,CAACY,QAAL,EAAe;AACbC,gBAAAA,KAAK,CAAC,wBAAD,CAAL;AACA;AACD;;AACDzB,cAAAA,YAAY,CAACwB,QAAD,CAAZ;AACD,aAVH;AAWE,YAAA,WAAW,EAAC;AAXd;AAAA;AAAA;AAAA;AAAA,kBA9BF,eA2CE,QAAC,IAAD,CAAM,KAAN;AAAA,mCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBA3CF,eA8CE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,EAAE,EAAC,QADL;AAEE,YAAA,SAAS,EAAE,MAFb;AAGE,YAAA,QAAQ,EAAE,MAAOZ,CAAP,IAAa;AACrBD,cAAAA,iBAAiB,CAACC,CAAD,EAAI,YAAJ,CAAjB;AACD,aALH;AAME,YAAA,WAAW,EAAC,YANd;AAAA,oCAQE;AAAQ,cAAA,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,EASGpB,MAAM,CAACkC,GAAP,CAAYC,KAAD,iBACV;AAEE,cAAA,KAAK,EAAEA,KAAK,CAACC,WAAN,EAFT;AAAA,wBAIGD;AAJH,eACQ,cAAaA,KAAK,CAACC,WAAN,EAAoB,EADzC;AAAA;AAAA;AAAA;AAAA,oBADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9CF,eAiEE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,EAAE,EAAC,QADL;AAEE,YAAA,SAAS,EAAE,MAFb;AAGE,YAAA,QAAQ,EAAE,MAAOhB,CAAP,IAAa;AACrBD,cAAAA,iBAAiB,CAACC,CAAD,EAAI,OAAJ,CAAjB;AACD,aALH;AAME,YAAA,WAAW,EAAC,WANd;AAAA,oCAQE;AAAQ,cAAA,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,EASGpB,MAAM,CAACkC,GAAP,CAAYC,KAAD,iBACV;AAEE,cAAA,KAAK,EAAEA,KAAK,CAACC,WAAN,EAFT;AAAA,wBAIGD;AAJH,eACQ,SAAQA,KAAK,CAACC,WAAN,EAAoB,EADpC;AAAA;AAAA;AAAA;AAAA,oBADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjEF,eAoFE,QAAC,IAAD,CAAM,OAAN;AACE,YAAA,EAAE,EAAC,QADL;AAEE,YAAA,SAAS,EAAE,MAFb;AAGE,YAAA,QAAQ,EAAE,MAAOhB,CAAP,IAAa;AACrBD,cAAAA,iBAAiB,CAACC,CAAD,EAAI,OAAJ,CAAjB;AACD,aALH;AAME,YAAA,WAAW,EAAC,WANd;AAAA,oCAQE;AAAQ,cAAA,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,EASGnB,MAAM,CAACiC,GAAP,CAAYG,KAAD,iBACV;AAEE,cAAA,KAAK,EAAEA,KAAK,CAACD,WAAN,EAFT;AAAA,wBAIGC;AAJH,eACQ,SAAQA,KAAK,CAACD,WAAN,EAAoB,EADpC;AAAA;AAAA;AAAA;AAAA,oBADD,CATH;AAAA;AAAA;AAAA;AAAA;AAAA,kBApFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALF,eA+GE,QAAC,KAAD,CAAO,MAAP;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAC,mBAAhB;AAAoC,UAAA,OAAO,EAAEnB,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,MADV;AAEE,UAAA,QAAQ,EAAE,CAACF,YAAY,EAFzB;AAGE,UAAA,OAAO,EAAE,MAAM;AACbZ,YAAAA,IAAI,CAAC;AACHE,cAAAA,IADG;AAEHE,cAAAA,SAFG;AAGHE,cAAAA,WAHG;AAIH6B,cAAAA,YAAY,EAAElC,OAJX;AAKHO,cAAAA;AALG,aAAD,CAAJ;AAOAM,YAAAA,WAAW;AACZ,WAZH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cA/GF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA,kBADF;AAmJD,CArMD;;GAAMf,O;;KAAAA,O;AAuMNA,OAAO,CAACqC,SAAR,GAAoB;AAElB;AACApC,EAAAA,IAAI,EAAET,SAAS,CAAC8C,IAAV,CAAeC,UAHH;AAIlBrC,EAAAA,OAAO,EAAEV,SAAS,CAACgD,MAAV,CAAiBD;AAJR,CAApB;AAOA,eAAevC,OAAf","sourcesContent":["/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\n// basic attributes that can be added to NFT\nconst COLORS = [\"Red\", \"Green\", \"Blue\", \"Cyan\", \"Yellow\", \"Purple\"];\nconst SHAPES = [\"Circle\", \"Square\", \"Triangle\"];\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  //store attributes of an NFT\n  const [attributes, setAttributes] = useState([]);\n  const [show, setShow] = useState(false);\n\n\n  // check if all form data has been filled\n  const isFormFilled = () =>\n      name && ipfsImage && description && attributes.length > 2;\n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  // add an attribute to an NFT\n  const setAttributesFunc = (e, trait_type) => {\n    const {value} = e.target;\n    const attributeObject = {\n      trait_type,\n      value,\n    };\n    const arr = attributes;\n\n    // check if attribute already exists\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\n\n    if (index >= 0) {\n\n      // update the existing attribute\n      arr[index] = {\n        trait_type,\n        value,\n      };\n      setAttributes(arr);\n      return;\n    }\n\n    // add a new attribute\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\n  };\n\n  return (\n    <>\n      <Button\n        onClick={handleShow}\n        variant=\"dark\"\n        className=\"rounded-pill px-0\"\n        style={{ width: \"38px\" }}\n      >\n        <i className=\"bi bi-plus\"></i>\n      </Button>\n\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name of NFT\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n            <Form.Label>\n              <h5>Properties</h5>\n            </Form.Label>\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"background\");\n              }}\n              placeholder=\"Background\"\n            >\n              <option hidden>Background</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`background-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"color\");\n              }}\n              placeholder=\"NFT Color\"\n            >\n              <option hidden>Color</option>\n              {COLORS.map((color) => (\n                <option\n                  key={`color-${color.toLowerCase()}`}\n                  value={color.toLowerCase()}\n                >\n                  {color}\n                </option>\n              ))}\n            </Form.Control>\n\n            <Form.Control\n              as=\"select\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                setAttributesFunc(e, \"shape\");\n              }}\n              placeholder=\"NFT Shape\"\n            >\n              <option hidden>Shape</option>\n              {SHAPES.map((shape) => (\n                <option\n                  key={`shape-${shape.toLowerCase()}`}\n                  value={shape.toLowerCase()}\n                >\n                  {shape}\n                </option>\n              ))}\n            </Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                ipfsImage,\n                description,\n                ownerAddress: address,\n                attributes,\n              });\n              handleClose();\n            }}\n          >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;"]},"metadata":{},"sourceType":"module"}