{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nexport const useBalance = () => {\n  _s();\n\n  const {\n    address,\n    kit\n  } = useContractKit();\n  const [balance, setBalance] = useState(0);\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n  return {\n    balance,\n    getBalance\n  };\n};\n\n_s(useBalance, \"o3cSb5hnePzsATqjbqvCFE3GIRk=\", false, function () {\n  return [useContractKit];\n});","map":{"version":3,"sources":["/Users/Lucy/PROYECTOS/celo-react-boilerplate/src/hooks/useBalance.js"],"names":["useState","useEffect","useCallback","useContractKit","useBalance","address","kit","balance","setBalance","getBalance","value","getTotalBalance"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAAA;;AAC9B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAmBH,cAAc,EAAvC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,CAAD,CAAtC;AAEA,QAAMS,UAAU,GAAGP,WAAW,CAAC,YAAY;AACzC;AACA,UAAMQ,KAAK,GAAG,MAAMJ,GAAG,CAACK,eAAJ,CAAoBN,OAApB,CAApB;AACAG,IAAAA,UAAU,CAACE,KAAD,CAAV;AACD,GAJ6B,EAI3B,CAACL,OAAD,EAAUC,GAAV,CAJ2B,CAA9B;AAMAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,OAAJ,EAAaI,UAAU;AACxB,GAFQ,EAEN,CAACJ,OAAD,EAAUI,UAAV,CAFM,CAAT;AAIA,SAAO;AACLF,IAAAA,OADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAlBM;;GAAML,U;UACcD,c","sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n  const getBalance = useCallback(async () => {\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}