{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidatorsWrapper = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar async_1 = require(\"@celo/base/lib/async\");\n\nvar collections_1 = require(\"@celo/base/lib/collections\");\n\nvar connect_1 = require(\"@celo/connect\");\n\nvar fixidity_1 = require(\"@celo/utils/lib/fixidity\");\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\n// TODO(asa): Support validator signers\n\n\nvar ValidatorsWrapper =\n/** @class */\nfunction (_super) {\n  __extends(ValidatorsWrapper, _super);\n\n  function ValidatorsWrapper() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Queues an update to a validator group's commission.\n     * @param commission Fixidity representation of the commission this group receives on epoch\n     *   payments made to its members. Must be in the range [0, 1.0].\n     */\n\n\n    _this.setNextCommissionUpdate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setNextCommissionUpdate, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToFixidityString));\n    /**\n     * Updates a validator group's commission based on the previously queued update\n     */\n\n    _this.updateCommission = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.updateCommission);\n    /**\n     * Returns the Locked Gold requirements for specific account.\n     * @returns The Locked Gold requirements for a specific account.\n     */\n\n    _this.getAccountLockedGoldRequirement = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAccountLockedGoldRequirement, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the reset period, in seconds, for slashing multiplier.\n     */\n\n    _this.getSlashingMultiplierResetPeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.slashingMultiplierResetPeriod, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the update delay, in blocks, for the group commission.\n     */\n\n    _this.getCommissionUpdateDelay = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.commissionUpdateDelay, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Returns the validator downtime grace period\n     */\n\n    _this.getDowntimeGracePeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.downtimeGracePeriod, undefined, BaseWrapper_1.valueToBigNumber);\n    /**\n     * Updates a validator's BLS key.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     * @return True upon success.\n     */\n\n    _this.updateBlsPublicKey = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.updateBlsPublicKey, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n    /**\n     * Returns whether a particular account has a registered validator.\n     * @param account The account.\n     * @return Whether a particular address is a registered validator.\n     */\n\n    _this.isValidator = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidator);\n    /**\n     * Returns whether a particular account has a registered validator group.\n     * @param account The account.\n     * @return Whether a particular address is a registered validator group.\n     */\n\n    _this.isValidatorGroup = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidatorGroup);\n    /**\n     * Returns whether an account meets the requirements to register a validator.\n     * @param account The account.\n     * @return Whether an account meets the requirements to register a validator.\n     */\n\n    _this.meetsValidatorBalanceRequirements = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var lockedGold, total, reqs;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.kit.contracts.getLockedGold()];\n\n            case 1:\n              lockedGold = _a.sent();\n              return [4\n              /*yield*/\n              , lockedGold.getAccountTotalLockedGold(address)];\n\n            case 2:\n              total = _a.sent();\n              return [4\n              /*yield*/\n              , this.getValidatorLockedGoldRequirements()];\n\n            case 3:\n              reqs = _a.sent();\n              return [2\n              /*return*/\n              , reqs.value.lte(total)];\n          }\n        });\n      });\n    };\n    /**\n     * Returns whether an account meets the requirements to register a group.\n     * @param account The account.\n     * @return Whether an account meets the requirements to register a group.\n     */\n\n\n    _this.meetsValidatorGroupBalanceRequirements = function (address) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var lockedGold, total, reqs;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this.kit.contracts.getLockedGold()];\n\n            case 1:\n              lockedGold = _a.sent();\n              return [4\n              /*yield*/\n              , lockedGold.getAccountTotalLockedGold(address)];\n\n            case 2:\n              total = _a.sent();\n              return [4\n              /*yield*/\n              , this.getGroupLockedGoldRequirements()];\n\n            case 3:\n              reqs = _a.sent();\n              return [2\n              /*return*/\n              , reqs.value.lte(total)];\n          }\n        });\n      });\n    };\n    /**\n     * Returns the Validator's group membership history\n     * @param validator The validator whose membership history to return.\n     * @return The group membership history of a validator.\n     */\n\n\n    _this.getValidatorMembershipHistory = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n      return (0, collections_1.zip)(function (epoch, group) {\n        return {\n          epoch: (0, BaseWrapper_1.valueToInt)(epoch),\n          group: group\n        };\n      }, res[0], res[1]);\n    });\n    /**\n     * Returns extra data from the Validator's group membership history\n     * @param validator The validator whose membership history to return.\n     * @return The group membership history of a validator.\n     */\n\n    _this.getValidatorMembershipHistoryExtraData = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n      return {\n        lastRemovedFromGroupTimestamp: (0, BaseWrapper_1.valueToInt)(res[2]),\n        tail: (0, BaseWrapper_1.valueToInt)(res[3])\n      };\n    });\n    /** Get the size (amount of members) of a ValidatorGroup */\n\n    _this.getValidatorGroupSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getGroupNumMembers, undefined, BaseWrapper_1.valueToInt);\n    /** Get list of registered validator group addresses */\n\n    _this.getRegisteredValidatorGroupsAddresses = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getRegisteredValidatorGroups);\n    /**\n     * Registers a validator unaffiliated with any validator group.\n     *\n     * Fails if the account is already a validator or validator group.\n     *\n     * @param validatorAddress The address that the validator is using for consensus, should match\n     *   the validator signer.\n     * @param ecdsaPublicKey The ECDSA public key that the validator is using for consensus. 64 bytes.\n     * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n     *   of possession. 48 bytes.\n     * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n     *   account address. 96 bytes.\n     */\n\n    _this.getEpochNumber = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochNumber, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.getEpochSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochSize, undefined, BaseWrapper_1.valueToBigNumber);\n    _this.registerValidator = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.registerValidator, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n    /**\n     * Affiliates a validator with a group, allowing it to be added as a member.\n     * De-affiliates with the previously affiliated group if present.\n     * @param group The validator group with which to affiliate.\n     */\n\n    _this.affiliate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.affiliate);\n    /**\n     * De-affiliates a validator, removing it from the group for which it is a member.\n     * Fails if the account is not a validator with non-zero affiliation.\n     */\n\n    _this.deaffiliate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.deaffiliate);\n    /**\n     * Removes a validator from the group for which it is a member.\n     * @param validatorAccount The validator to deaffiliate from their affiliated validator group.\n     */\n\n    _this.forceDeaffiliateIfValidator = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.forceDeaffiliateIfValidator);\n    /**\n     * Resets a group's slashing multiplier if it has been >= the reset period since\n     * the last time the group was slashed.\n     */\n\n    _this.resetSlashingMultiplier = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.resetSlashingMultiplier);\n    /**\n     * Removes a member from a ValidatorGroup\n     * The ValidatorGroup is specified by the `from` of the tx.\n     *\n     * @param validator The Validator to remove from the group\n     */\n\n    _this.removeMember = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.removeMember);\n    return _this;\n  }\n  /**\n   * Returns the Locked Gold requirements for validators.\n   * @returns The Locked Gold requirements for validators.\n   */\n\n\n  ValidatorsWrapper.prototype.getValidatorLockedGoldRequirements = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getValidatorLockedGoldRequirements().call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n              duration: (0, BaseWrapper_1.valueToBigNumber)(res[1])\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the Locked Gold requirements for validator groups.\n   * @returns The Locked Gold requirements for validator groups.\n   */\n\n\n  ValidatorsWrapper.prototype.getGroupLockedGoldRequirements = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getGroupLockedGoldRequirements().call()];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n              duration: (0, BaseWrapper_1.valueToBigNumber)(res[1])\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current configuration parameters.\n   */\n\n\n  ValidatorsWrapper.prototype.getConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Promise.all([this.getValidatorLockedGoldRequirements(), this.getGroupLockedGoldRequirements(), this.contract.methods.maxGroupSize().call(), this.contract.methods.membershipHistoryLength().call(), this.getSlashingMultiplierResetPeriod(), this.getCommissionUpdateDelay(), this.getDowntimeGracePeriod()])];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , {\n              validatorLockedGoldRequirements: res[0],\n              groupLockedGoldRequirements: res[1],\n              maxGroupSize: (0, BaseWrapper_1.valueToBigNumber)(res[2]),\n              membershipHistoryLength: (0, BaseWrapper_1.valueToBigNumber)(res[3]),\n              slashingMultiplierResetPeriod: res[4],\n              commissionUpdateDelay: res[5],\n              downtimeGracePeriod: res[6]\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @dev Returns human readable configuration of the validators contract\n   * @return ValidatorsConfig object\n   */\n\n\n  ValidatorsWrapper.prototype.getHumanReadableConfig = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var config, validatorLockedGoldRequirements, groupLockedGoldRequirements;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getConfig()];\n\n          case 1:\n            config = _a.sent();\n            validatorLockedGoldRequirements = __assign(__assign({}, config.validatorLockedGoldRequirements), {\n              duration: (0, BaseWrapper_1.secondsToDurationString)(config.validatorLockedGoldRequirements.duration)\n            });\n            groupLockedGoldRequirements = __assign(__assign({}, config.groupLockedGoldRequirements), {\n              duration: (0, BaseWrapper_1.secondsToDurationString)(config.groupLockedGoldRequirements.duration)\n            });\n            return [2\n            /*return*/\n            , __assign(__assign({}, config), {\n              slashingMultiplierResetPeriod: (0, BaseWrapper_1.secondsToDurationString)(config.slashingMultiplierResetPeriod),\n              commissionUpdateDelay: (0, BaseWrapper_1.blocksToDurationString)(config.commissionUpdateDelay),\n              validatorLockedGoldRequirements: validatorLockedGoldRequirements,\n              groupLockedGoldRequirements: groupLockedGoldRequirements\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the account associated with `signer`.\n   * @param signer The address of an account or currently authorized validator signer.\n   * @dev Fails if the `signer` is not an account or currently authorized validator.\n   * @return The associated account.\n   */\n\n\n  ValidatorsWrapper.prototype.validatorSignerToAccount = function (signerAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            return [2\n            /*return*/\n            , accounts.validatorSignerToAccount(signerAddress)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the account associated with `signer`.\n   * @param signer The address of the account or previously authorized signer.\n   * @dev Fails if the `signer` is not an account or previously authorized signer.\n   * @return The associated account.\n   */\n\n\n  ValidatorsWrapper.prototype.signerToAccount = function (signerAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accounts;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 1:\n            accounts = _a.sent();\n            return [2\n            /*return*/\n            , accounts.signerToAccount(signerAddress)];\n        }\n      });\n    });\n  };\n  /** Get Validator information */\n\n\n  ValidatorsWrapper.prototype.getValidator = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, accounts, name;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getValidator(address).call({}, blockNumber)];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 2:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getName(address, blockNumber)];\n\n          case 3:\n            name = _a.sent() || '';\n            return [2\n            /*return*/\n            , {\n              name: name,\n              address: address,\n              ecdsaPublicKey: res.ecdsaPublicKey,\n              blsPublicKey: res.blsPublicKey,\n              affiliation: res.affiliation,\n              score: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res.score)),\n              signer: res.signer\n            }];\n        }\n      });\n    });\n  };\n\n  ValidatorsWrapper.prototype.getValidatorFromSigner = function (address, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var account, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.signerToAccount(address)];\n\n          case 1:\n            account = _b.sent();\n            _a = (0, address_1.eqAddress)(account, address_1.NULL_ADDRESS);\n            if (_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isValidator(account)];\n\n          case 2:\n            _a = !_b.sent();\n            _b.label = 3;\n\n          case 3:\n            if (_a) {\n              return [2\n              /*return*/\n              , {\n                name: 'Unregistered validator',\n                address: address,\n                ecdsaPublicKey: '',\n                blsPublicKey: '',\n                affiliation: '',\n                score: new bignumber_js_1.default(0),\n                signer: address\n              }];\n            } else {\n              return [2\n              /*return*/\n              , this.getValidator(account, blockNumber)];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /** Get ValidatorGroup information */\n\n\n  ValidatorsWrapper.prototype.getValidatorGroup = function (address, getAffiliates, blockNumber) {\n    if (getAffiliates === void 0) {\n      getAffiliates = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var res, accounts, name, affiliates, validators;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.contract.methods.getValidatorGroup(address).call({}, blockNumber)];\n\n          case 1:\n            res = _a.sent();\n            return [4\n            /*yield*/\n            , this.kit.contracts.getAccounts()];\n\n          case 2:\n            accounts = _a.sent();\n            return [4\n            /*yield*/\n            , accounts.getName(address, blockNumber)];\n\n          case 3:\n            name = _a.sent() || '';\n            affiliates = [];\n            if (!getAffiliates) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getRegisteredValidators(blockNumber)];\n\n          case 4:\n            validators = _a.sent();\n            affiliates = validators.filter(function (v) {\n              return v.affiliation && (0, address_1.eqAddress)(v.affiliation, address);\n            }).filter(function (v) {\n              return !res[0].includes(v.address);\n            });\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              name: name,\n              address: address,\n              members: Array.from(res[0]),\n              commission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[1])),\n              nextCommission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[2])),\n              nextCommissionBlock: new bignumber_js_1.default(res[3]),\n              membersUpdated: res[4].reduce(function (a, b) {\n                return Math.max(a, new bignumber_js_1.default(b).toNumber());\n              }, 0),\n              affiliates: affiliates.map(function (v) {\n                return v.address;\n              }),\n              slashingMultiplier: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[5])),\n              lastSlashed: (0, BaseWrapper_1.valueToBigNumber)(res[6])\n            }];\n        }\n      });\n    });\n  };\n  /** Get list of registered validator addresses */\n\n\n  ValidatorsWrapper.prototype.getRegisteredValidatorsAddresses = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        // @ts-ignore: Expected 0-1 arguments, but got 2\n        return [2\n        /*return*/\n        , this.contract.methods.getRegisteredValidators().call({}, blockNumber)];\n      });\n    });\n  };\n  /** Get list of registered validators */\n\n\n  ValidatorsWrapper.prototype.getRegisteredValidators = function (blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var vgAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorsAddresses(blockNumber)];\n\n          case 1:\n            vgAddresses = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(10, vgAddresses, function (addr) {\n              return _this.getValidator(addr, blockNumber);\n            })];\n        }\n      });\n    });\n  };\n  /** Get list of registered validator groups */\n\n\n  ValidatorsWrapper.prototype.getRegisteredValidatorGroups = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var vgAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorGroupsAddresses()];\n\n          case 1:\n            vgAddresses = _a.sent();\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(10, vgAddresses, function (addr) {\n              return _this.getValidatorGroup(addr, false);\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * De-registers a validator, removing it from the group for which it is a member.\n   * @param validatorAddress Address of the validator to deregister\n   */\n\n\n  ValidatorsWrapper.prototype.deregisterValidator = function (validatorAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allValidators, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorsAddresses()];\n\n          case 1:\n            allValidators = _a.sent();\n            idx = (0, address_1.findAddressIndex)(validatorAddress, allValidators);\n\n            if (idx < 0) {\n              throw new Error(validatorAddress + \" is not a registered validator\");\n            }\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.deregisterValidator(idx))];\n        }\n      });\n    });\n  };\n  /**\n   * Registers a validator group with no member validators.\n   * Fails if the account is already a validator or validator group.\n   * Fails if the account does not have sufficient weight.\n   *\n   * @param commission the commission this group receives on epoch payments made to its members.\n   */\n\n\n  ValidatorsWrapper.prototype.registerValidatorGroup = function (commission) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.registerValidatorGroup((0, fixidity_1.toFixed)(commission).toFixed()))];\n      });\n    });\n  };\n  /**\n   * De-registers a validator Group\n   * @param validatorGroupAddress Address of the validator group to deregister\n   */\n\n\n  ValidatorsWrapper.prototype.deregisterValidatorGroup = function (validatorGroupAddress) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allGroups, idx;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getRegisteredValidatorGroupsAddresses()];\n\n          case 1:\n            allGroups = _a.sent();\n            idx = (0, address_1.findAddressIndex)(validatorGroupAddress, allGroups);\n\n            if (idx < 0) {\n              throw new Error(validatorGroupAddress + \" is not a registered validator\");\n            }\n\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.deregisterValidatorGroup(idx))];\n        }\n      });\n    });\n  };\n  /**\n   * Adds a member to the end of a validator group's list of members.\n   * Fails if `validator` has not set their affiliation to this account.\n   * @param validator The validator to add to the group\n   */\n\n\n  ValidatorsWrapper.prototype.addMember = function (group, validator) {\n    return __awaiter(this, void 0, void 0, function () {\n      var numMembers, election, voteWeight, _a, lesser, greater;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getValidatorGroupSize(group)];\n\n          case 1:\n            numMembers = _b.sent();\n            if (!(numMembers === 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.kit.contracts.getElection()];\n\n          case 2:\n            election = _b.sent();\n            return [4\n            /*yield*/\n            , election.getTotalVotesForGroup(group)];\n\n          case 3:\n            voteWeight = _b.sent();\n            return [4\n            /*yield*/\n            , election.findLesserAndGreaterAfterVote(group, voteWeight)];\n\n          case 4:\n            _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.addFirstMember(validator, lesser, greater))];\n\n          case 5:\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.addMember(validator))];\n        }\n      });\n    });\n  };\n  /**\n   * Reorders a member within a validator group.\n   * Fails if `validator` is not a member of the account's validator group.\n   * @param groupAddr The validator group\n   * @param validator The validator to reorder.\n   * @param newIndex New position for the validator\n   */\n\n\n  ValidatorsWrapper.prototype.reorderMember = function (groupAddr, validator, newIndex) {\n    return __awaiter(this, void 0, void 0, function () {\n      var group, currentIdx, nextMember, prevMember;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getValidatorGroup(groupAddr)];\n\n          case 1:\n            group = _a.sent();\n\n            if (newIndex < 0 || newIndex >= group.members.length) {\n              throw new Error(\"Invalid index \" + newIndex + \"; max index is \" + (group.members.length - 1));\n            }\n\n            currentIdx = (0, address_1.findAddressIndex)(validator, group.members);\n\n            if (currentIdx < 0) {\n              throw new Error(\"ValidatorGroup \" + groupAddr + \" does not include \" + validator);\n            } else if (currentIdx === newIndex) {\n              throw new Error(\"Validator is already in position \" + newIndex);\n            } // remove the element\n\n\n            group.members.splice(currentIdx, 1); // add it on new position\n\n            group.members.splice(newIndex, 0, validator);\n            nextMember = newIndex === group.members.length - 1 ? address_1.NULL_ADDRESS : group.members[newIndex + 1];\n            prevMember = newIndex === 0 ? address_1.NULL_ADDRESS : group.members[newIndex - 1];\n            return [2\n            /*return*/\n            , (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.reorderMember(validator, nextMember, prevMember))];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieves ValidatorRewards for epochNumber.\n   * @param epochNumber The epoch to retrieve ValidatorRewards at.\n   */\n\n\n  ValidatorsWrapper.prototype.getValidatorRewards = function (epochNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockNumber, events, validator, validatorGroup;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.kit.getLastBlockNumberForEpoch(epochNumber)];\n\n          case 1:\n            blockNumber = _a.sent();\n            return [4\n            /*yield*/\n            , this.getPastEvents('ValidatorEpochPaymentDistributed', {\n              fromBlock: blockNumber,\n              toBlock: blockNumber\n            })];\n\n          case 2:\n            events = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(10, events, function (e) {\n              return _this.getValidator(e.returnValues.validator);\n            })];\n\n          case 3:\n            validator = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(10, events, function (e) {\n              return _this.getValidatorGroup(e.returnValues.group, false);\n            })];\n\n          case 4:\n            validatorGroup = _a.sent();\n            return [2\n            /*return*/\n            , events.map(function (e, index) {\n              return {\n                epochNumber: epochNumber,\n                validator: validator[index],\n                validatorPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.validatorPayment),\n                group: validatorGroup[index],\n                groupPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.groupPayment)\n              };\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current set of validator signer addresses\n   */\n\n\n  ValidatorsWrapper.prototype.currentSignerSet = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var n, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = BaseWrapper_1.valueToInt;\n            return [4\n            /*yield*/\n            , this.contract.methods.numberValidatorsInCurrentSet().call()];\n\n          case 1:\n            n = _a.apply(void 0, [_b.sent()]);\n            return [2\n            /*return*/\n            , (0, async_1.concurrentMap)(5, (0, collections_1.zeroRange)(n), function (idx) {\n              return _this.contract.methods.validatorSignerAddressFromCurrentSet(idx).call();\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current set of validator signer and account addresses\n   */\n\n\n  ValidatorsWrapper.prototype.currentValidatorAccountsSet = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var signerAddresses, accountAddresses;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.currentSignerSet()];\n\n          case 1:\n            signerAddresses = _a.sent();\n            return [4\n            /*yield*/\n            , (0, async_1.concurrentMap)(5, signerAddresses, function (signer) {\n              return _this.validatorSignerToAccount(signer);\n            })];\n\n          case 2:\n            accountAddresses = _a.sent();\n            return [2\n            /*return*/\n            , (0, collections_1.zip)(function (signer, account) {\n              return {\n                signer: signer,\n                account: account\n              };\n            }, signerAddresses, accountAddresses)];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the group membership for validator account.\n   * @param account Address of validator account to retrieve group membership for.\n   * @param blockNumber Block number to retrieve group membership at.\n   * @return Group and membership history index for `validator`.\n   */\n\n\n  ValidatorsWrapper.prototype.getValidatorMembershipHistoryIndex = function (account, blockNumber) {\n    return __awaiter(this, void 0, void 0, function () {\n      var blockEpoch, _a, _b, _c, membershipHistory, historyIndex, group;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _b = (_a = this.kit).getEpochNumberOfBlock;\n            _c = blockNumber;\n            if (_c) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.kit.connection.getBlockNumber()];\n\n          case 1:\n            _c = _d.sent();\n            _d.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , _b.apply(_a, [_c])];\n\n          case 3:\n            blockEpoch = _d.sent();\n            return [4\n            /*yield*/\n            , this.getValidatorMembershipHistory(account)];\n\n          case 4:\n            membershipHistory = _d.sent();\n            historyIndex = this.findValidatorMembershipHistoryIndex(blockEpoch, membershipHistory);\n            group = membershipHistory[historyIndex].group;\n            return [2\n            /*return*/\n            , {\n              group: group,\n              historyIndex: historyIndex\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the index into `history` for `epoch`.\n   * @param epoch The needle.\n   * @param history The haystack.\n   * @return Index for epoch or -1.\n   */\n\n\n  ValidatorsWrapper.prototype.findValidatorMembershipHistoryIndex = function (epoch, history) {\n    var revIndex = history.slice().reverse().findIndex(function (x) {\n      return x.epoch <= epoch;\n    });\n    return revIndex < 0 ? -1 : history.length - revIndex - 1;\n  };\n\n  return ValidatorsWrapper;\n}(BaseWrapper_1.BaseWrapper);\n\nexports.ValidatorsWrapper = ValidatorsWrapper;","map":{"version":3,"sources":["../../src/wrappers/Validators.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidatorsWrapper = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar async_1 = require(\"@celo/base/lib/async\");\nvar collections_1 = require(\"@celo/base/lib/collections\");\nvar connect_1 = require(\"@celo/connect\");\nvar fixidity_1 = require(\"@celo/utils/lib/fixidity\");\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar BaseWrapper_1 = require(\"./BaseWrapper\");\n/**\n * Contract for voting for validators and managing validator groups.\n */\n// TODO(asa): Support validator signers\nvar ValidatorsWrapper = /** @class */ (function (_super) {\n    __extends(ValidatorsWrapper, _super);\n    function ValidatorsWrapper() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * Queues an update to a validator group's commission.\n         * @param commission Fixidity representation of the commission this group receives on epoch\n         *   payments made to its members. Must be in the range [0, 1.0].\n         */\n        _this.setNextCommissionUpdate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.setNextCommissionUpdate, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.valueToFixidityString));\n        /**\n         * Updates a validator group's commission based on the previously queued update\n         */\n        _this.updateCommission = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.updateCommission);\n        /**\n         * Returns the Locked Gold requirements for specific account.\n         * @returns The Locked Gold requirements for a specific account.\n         */\n        _this.getAccountLockedGoldRequirement = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAccountLockedGoldRequirement, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Returns the reset period, in seconds, for slashing multiplier.\n         */\n        _this.getSlashingMultiplierResetPeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.slashingMultiplierResetPeriod, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Returns the update delay, in blocks, for the group commission.\n         */\n        _this.getCommissionUpdateDelay = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.commissionUpdateDelay, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Returns the validator downtime grace period\n         */\n        _this.getDowntimeGracePeriod = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.downtimeGracePeriod, undefined, BaseWrapper_1.valueToBigNumber);\n        /**\n         * Updates a validator's BLS key.\n         * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n         *   of possession. 48 bytes.\n         * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n         *   account address. 96 bytes.\n         * @return True upon success.\n         */\n        _this.updateBlsPublicKey = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.updateBlsPublicKey, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n        /**\n         * Returns whether a particular account has a registered validator.\n         * @param account The account.\n         * @return Whether a particular address is a registered validator.\n         */\n        _this.isValidator = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidator);\n        /**\n         * Returns whether a particular account has a registered validator group.\n         * @param account The account.\n         * @return Whether a particular address is a registered validator group.\n         */\n        _this.isValidatorGroup = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.isValidatorGroup);\n        /**\n         * Returns whether an account meets the requirements to register a validator.\n         * @param account The account.\n         * @return Whether an account meets the requirements to register a validator.\n         */\n        _this.meetsValidatorBalanceRequirements = function (address) { return __awaiter(_this, void 0, void 0, function () {\n            var lockedGold, total, reqs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getLockedGold()];\n                    case 1:\n                        lockedGold = _a.sent();\n                        return [4 /*yield*/, lockedGold.getAccountTotalLockedGold(address)];\n                    case 2:\n                        total = _a.sent();\n                        return [4 /*yield*/, this.getValidatorLockedGoldRequirements()];\n                    case 3:\n                        reqs = _a.sent();\n                        return [2 /*return*/, reqs.value.lte(total)];\n                }\n            });\n        }); };\n        /**\n         * Returns whether an account meets the requirements to register a group.\n         * @param account The account.\n         * @return Whether an account meets the requirements to register a group.\n         */\n        _this.meetsValidatorGroupBalanceRequirements = function (address) { return __awaiter(_this, void 0, void 0, function () {\n            var lockedGold, total, reqs;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getLockedGold()];\n                    case 1:\n                        lockedGold = _a.sent();\n                        return [4 /*yield*/, lockedGold.getAccountTotalLockedGold(address)];\n                    case 2:\n                        total = _a.sent();\n                        return [4 /*yield*/, this.getGroupLockedGoldRequirements()];\n                    case 3:\n                        reqs = _a.sent();\n                        return [2 /*return*/, reqs.value.lte(total)];\n                }\n            });\n        }); };\n        /**\n         * Returns the Validator's group membership history\n         * @param validator The validator whose membership history to return.\n         * @return The group membership history of a validator.\n         */\n        _this.getValidatorMembershipHistory = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) {\n            return (0, collections_1.zip)(function (epoch, group) { return ({ epoch: (0, BaseWrapper_1.valueToInt)(epoch), group: group }); }, res[0], res[1]);\n        });\n        /**\n         * Returns extra data from the Validator's group membership history\n         * @param validator The validator whose membership history to return.\n         * @return The group membership history of a validator.\n         */\n        _this.getValidatorMembershipHistoryExtraData = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getMembershipHistory, undefined, function (res) { return ({ lastRemovedFromGroupTimestamp: (0, BaseWrapper_1.valueToInt)(res[2]), tail: (0, BaseWrapper_1.valueToInt)(res[3]) }); });\n        /** Get the size (amount of members) of a ValidatorGroup */\n        _this.getValidatorGroupSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getGroupNumMembers, undefined, BaseWrapper_1.valueToInt);\n        /** Get list of registered validator group addresses */\n        _this.getRegisteredValidatorGroupsAddresses = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getRegisteredValidatorGroups);\n        /**\n         * Registers a validator unaffiliated with any validator group.\n         *\n         * Fails if the account is already a validator or validator group.\n         *\n         * @param validatorAddress The address that the validator is using for consensus, should match\n         *   the validator signer.\n         * @param ecdsaPublicKey The ECDSA public key that the validator is using for consensus. 64 bytes.\n         * @param blsPublicKey The BLS public key that the validator is using for consensus, should pass proof\n         *   of possession. 48 bytes.\n         * @param blsPop The BLS public key proof-of-possession, which consists of a signature on the\n         *   account address. 96 bytes.\n         */\n        _this.getEpochNumber = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochNumber, undefined, BaseWrapper_1.valueToBigNumber);\n        _this.getEpochSize = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getEpochSize, undefined, BaseWrapper_1.valueToBigNumber);\n        _this.registerValidator = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.registerValidator, (0, BaseWrapper_1.tupleParser)(BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes, BaseWrapper_1.stringToSolidityBytes));\n        /**\n         * Affiliates a validator with a group, allowing it to be added as a member.\n         * De-affiliates with the previously affiliated group if present.\n         * @param group The validator group with which to affiliate.\n         */\n        _this.affiliate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.affiliate);\n        /**\n         * De-affiliates a validator, removing it from the group for which it is a member.\n         * Fails if the account is not a validator with non-zero affiliation.\n         */\n        _this.deaffiliate = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.deaffiliate);\n        /**\n         * Removes a validator from the group for which it is a member.\n         * @param validatorAccount The validator to deaffiliate from their affiliated validator group.\n         */\n        _this.forceDeaffiliateIfValidator = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.forceDeaffiliateIfValidator);\n        /**\n         * Resets a group's slashing multiplier if it has been >= the reset period since\n         * the last time the group was slashed.\n         */\n        _this.resetSlashingMultiplier = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.resetSlashingMultiplier);\n        /**\n         * Removes a member from a ValidatorGroup\n         * The ValidatorGroup is specified by the `from` of the tx.\n         *\n         * @param validator The Validator to remove from the group\n         */\n        _this.removeMember = (0, BaseWrapper_1.proxySend)(_this.kit, _this.contract.methods.removeMember);\n        return _this;\n    }\n    /**\n     * Returns the Locked Gold requirements for validators.\n     * @returns The Locked Gold requirements for validators.\n     */\n    ValidatorsWrapper.prototype.getValidatorLockedGoldRequirements = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getValidatorLockedGoldRequirements().call()];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n                                duration: (0, BaseWrapper_1.valueToBigNumber)(res[1]),\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the Locked Gold requirements for validator groups.\n     * @returns The Locked Gold requirements for validator groups.\n     */\n    ValidatorsWrapper.prototype.getGroupLockedGoldRequirements = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getGroupLockedGoldRequirements().call()];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                value: (0, BaseWrapper_1.valueToBigNumber)(res[0]),\n                                duration: (0, BaseWrapper_1.valueToBigNumber)(res[1]),\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns current configuration parameters.\n     */\n    ValidatorsWrapper.prototype.getConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.all([\n                            this.getValidatorLockedGoldRequirements(),\n                            this.getGroupLockedGoldRequirements(),\n                            this.contract.methods.maxGroupSize().call(),\n                            this.contract.methods.membershipHistoryLength().call(),\n                            this.getSlashingMultiplierResetPeriod(),\n                            this.getCommissionUpdateDelay(),\n                            this.getDowntimeGracePeriod(),\n                        ])];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, {\n                                validatorLockedGoldRequirements: res[0],\n                                groupLockedGoldRequirements: res[1],\n                                maxGroupSize: (0, BaseWrapper_1.valueToBigNumber)(res[2]),\n                                membershipHistoryLength: (0, BaseWrapper_1.valueToBigNumber)(res[3]),\n                                slashingMultiplierResetPeriod: res[4],\n                                commissionUpdateDelay: res[5],\n                                downtimeGracePeriod: res[6],\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @dev Returns human readable configuration of the validators contract\n     * @return ValidatorsConfig object\n     */\n    ValidatorsWrapper.prototype.getHumanReadableConfig = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var config, validatorLockedGoldRequirements, groupLockedGoldRequirements;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getConfig()];\n                    case 1:\n                        config = _a.sent();\n                        validatorLockedGoldRequirements = __assign(__assign({}, config.validatorLockedGoldRequirements), { duration: (0, BaseWrapper_1.secondsToDurationString)(config.validatorLockedGoldRequirements.duration) });\n                        groupLockedGoldRequirements = __assign(__assign({}, config.groupLockedGoldRequirements), { duration: (0, BaseWrapper_1.secondsToDurationString)(config.groupLockedGoldRequirements.duration) });\n                        return [2 /*return*/, __assign(__assign({}, config), { slashingMultiplierResetPeriod: (0, BaseWrapper_1.secondsToDurationString)(config.slashingMultiplierResetPeriod), commissionUpdateDelay: (0, BaseWrapper_1.blocksToDurationString)(config.commissionUpdateDelay), validatorLockedGoldRequirements: validatorLockedGoldRequirements, groupLockedGoldRequirements: groupLockedGoldRequirements })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the account associated with `signer`.\n     * @param signer The address of an account or currently authorized validator signer.\n     * @dev Fails if the `signer` is not an account or currently authorized validator.\n     * @return The associated account.\n     */\n    ValidatorsWrapper.prototype.validatorSignerToAccount = function (signerAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 1:\n                        accounts = _a.sent();\n                        return [2 /*return*/, accounts.validatorSignerToAccount(signerAddress)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the account associated with `signer`.\n     * @param signer The address of the account or previously authorized signer.\n     * @dev Fails if the `signer` is not an account or previously authorized signer.\n     * @return The associated account.\n     */\n    ValidatorsWrapper.prototype.signerToAccount = function (signerAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accounts;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 1:\n                        accounts = _a.sent();\n                        return [2 /*return*/, accounts.signerToAccount(signerAddress)];\n                }\n            });\n        });\n    };\n    /** Get Validator information */\n    ValidatorsWrapper.prototype.getValidator = function (address, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res, accounts, name;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getValidator(address).call({}, blockNumber)];\n                    case 1:\n                        res = _a.sent();\n                        return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 2:\n                        accounts = _a.sent();\n                        return [4 /*yield*/, accounts.getName(address, blockNumber)];\n                    case 3:\n                        name = (_a.sent()) || '';\n                        return [2 /*return*/, {\n                                name: name,\n                                address: address,\n                                ecdsaPublicKey: res.ecdsaPublicKey,\n                                blsPublicKey: res.blsPublicKey,\n                                affiliation: res.affiliation,\n                                score: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res.score)),\n                                signer: res.signer,\n                            }];\n                }\n            });\n        });\n    };\n    ValidatorsWrapper.prototype.getValidatorFromSigner = function (address, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var account, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.signerToAccount(address)];\n                    case 1:\n                        account = _b.sent();\n                        _a = (0, address_1.eqAddress)(account, address_1.NULL_ADDRESS);\n                        if (_a) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.isValidator(account)];\n                    case 2:\n                        _a = !(_b.sent());\n                        _b.label = 3;\n                    case 3:\n                        if (_a) {\n                            return [2 /*return*/, {\n                                    name: 'Unregistered validator',\n                                    address: address,\n                                    ecdsaPublicKey: '',\n                                    blsPublicKey: '',\n                                    affiliation: '',\n                                    score: new bignumber_js_1.default(0),\n                                    signer: address,\n                                }];\n                        }\n                        else {\n                            return [2 /*return*/, this.getValidator(account, blockNumber)];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /** Get ValidatorGroup information */\n    ValidatorsWrapper.prototype.getValidatorGroup = function (address, getAffiliates, blockNumber) {\n        if (getAffiliates === void 0) { getAffiliates = true; }\n        return __awaiter(this, void 0, void 0, function () {\n            var res, accounts, name, affiliates, validators;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.contract.methods.getValidatorGroup(address).call({}, blockNumber)];\n                    case 1:\n                        res = _a.sent();\n                        return [4 /*yield*/, this.kit.contracts.getAccounts()];\n                    case 2:\n                        accounts = _a.sent();\n                        return [4 /*yield*/, accounts.getName(address, blockNumber)];\n                    case 3:\n                        name = (_a.sent()) || '';\n                        affiliates = [];\n                        if (!getAffiliates) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.getRegisteredValidators(blockNumber)];\n                    case 4:\n                        validators = _a.sent();\n                        affiliates = validators\n                            .filter(function (v) { return v.affiliation && (0, address_1.eqAddress)(v.affiliation, address); })\n                            .filter(function (v) { return !res[0].includes(v.address); });\n                        _a.label = 5;\n                    case 5: return [2 /*return*/, {\n                            name: name,\n                            address: address,\n                            members: Array.from(res[0]),\n                            commission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[1])),\n                            nextCommission: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[2])),\n                            nextCommissionBlock: new bignumber_js_1.default(res[3]),\n                            membersUpdated: res[4].reduce(function (a, b) { return Math.max(a, new bignumber_js_1.default(b).toNumber()); }, 0),\n                            affiliates: affiliates.map(function (v) { return v.address; }),\n                            slashingMultiplier: (0, fixidity_1.fromFixed)(new bignumber_js_1.default(res[5])),\n                            lastSlashed: (0, BaseWrapper_1.valueToBigNumber)(res[6]),\n                        }];\n                }\n            });\n        });\n    };\n    /** Get list of registered validator addresses */\n    ValidatorsWrapper.prototype.getRegisteredValidatorsAddresses = function (blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                // @ts-ignore: Expected 0-1 arguments, but got 2\n                return [2 /*return*/, this.contract.methods.getRegisteredValidators().call({}, blockNumber)];\n            });\n        });\n    };\n    /** Get list of registered validators */\n    ValidatorsWrapper.prototype.getRegisteredValidators = function (blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var vgAddresses;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRegisteredValidatorsAddresses(blockNumber)];\n                    case 1:\n                        vgAddresses = _a.sent();\n                        return [2 /*return*/, (0, async_1.concurrentMap)(10, vgAddresses, function (addr) { return _this.getValidator(addr, blockNumber); })];\n                }\n            });\n        });\n    };\n    /** Get list of registered validator groups */\n    ValidatorsWrapper.prototype.getRegisteredValidatorGroups = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var vgAddresses;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRegisteredValidatorGroupsAddresses()];\n                    case 1:\n                        vgAddresses = _a.sent();\n                        return [2 /*return*/, (0, async_1.concurrentMap)(10, vgAddresses, function (addr) { return _this.getValidatorGroup(addr, false); })];\n                }\n            });\n        });\n    };\n    /**\n     * De-registers a validator, removing it from the group for which it is a member.\n     * @param validatorAddress Address of the validator to deregister\n     */\n    ValidatorsWrapper.prototype.deregisterValidator = function (validatorAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allValidators, idx;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRegisteredValidatorsAddresses()];\n                    case 1:\n                        allValidators = _a.sent();\n                        idx = (0, address_1.findAddressIndex)(validatorAddress, allValidators);\n                        if (idx < 0) {\n                            throw new Error(validatorAddress + \" is not a registered validator\");\n                        }\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.deregisterValidator(idx))];\n                }\n            });\n        });\n    };\n    /**\n     * Registers a validator group with no member validators.\n     * Fails if the account is already a validator or validator group.\n     * Fails if the account does not have sufficient weight.\n     *\n     * @param commission the commission this group receives on epoch payments made to its members.\n     */\n    ValidatorsWrapper.prototype.registerValidatorGroup = function (commission) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.registerValidatorGroup((0, fixidity_1.toFixed)(commission).toFixed()))];\n            });\n        });\n    };\n    /**\n     * De-registers a validator Group\n     * @param validatorGroupAddress Address of the validator group to deregister\n     */\n    ValidatorsWrapper.prototype.deregisterValidatorGroup = function (validatorGroupAddress) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allGroups, idx;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getRegisteredValidatorGroupsAddresses()];\n                    case 1:\n                        allGroups = _a.sent();\n                        idx = (0, address_1.findAddressIndex)(validatorGroupAddress, allGroups);\n                        if (idx < 0) {\n                            throw new Error(validatorGroupAddress + \" is not a registered validator\");\n                        }\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.deregisterValidatorGroup(idx))];\n                }\n            });\n        });\n    };\n    /**\n     * Adds a member to the end of a validator group's list of members.\n     * Fails if `validator` has not set their affiliation to this account.\n     * @param validator The validator to add to the group\n     */\n    ValidatorsWrapper.prototype.addMember = function (group, validator) {\n        return __awaiter(this, void 0, void 0, function () {\n            var numMembers, election, voteWeight, _a, lesser, greater;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.getValidatorGroupSize(group)];\n                    case 1:\n                        numMembers = _b.sent();\n                        if (!(numMembers === 0)) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.kit.contracts.getElection()];\n                    case 2:\n                        election = _b.sent();\n                        return [4 /*yield*/, election.getTotalVotesForGroup(group)];\n                    case 3:\n                        voteWeight = _b.sent();\n                        return [4 /*yield*/, election.findLesserAndGreaterAfterVote(group, voteWeight)];\n                    case 4:\n                        _a = _b.sent(), lesser = _a.lesser, greater = _a.greater;\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.addFirstMember(validator, lesser, greater))];\n                    case 5: return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.addMember(validator))];\n                }\n            });\n        });\n    };\n    /**\n     * Reorders a member within a validator group.\n     * Fails if `validator` is not a member of the account's validator group.\n     * @param groupAddr The validator group\n     * @param validator The validator to reorder.\n     * @param newIndex New position for the validator\n     */\n    ValidatorsWrapper.prototype.reorderMember = function (groupAddr, validator, newIndex) {\n        return __awaiter(this, void 0, void 0, function () {\n            var group, currentIdx, nextMember, prevMember;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.getValidatorGroup(groupAddr)];\n                    case 1:\n                        group = _a.sent();\n                        if (newIndex < 0 || newIndex >= group.members.length) {\n                            throw new Error(\"Invalid index \" + newIndex + \"; max index is \" + (group.members.length - 1));\n                        }\n                        currentIdx = (0, address_1.findAddressIndex)(validator, group.members);\n                        if (currentIdx < 0) {\n                            throw new Error(\"ValidatorGroup \" + groupAddr + \" does not include \" + validator);\n                        }\n                        else if (currentIdx === newIndex) {\n                            throw new Error(\"Validator is already in position \" + newIndex);\n                        }\n                        // remove the element\n                        group.members.splice(currentIdx, 1);\n                        // add it on new position\n                        group.members.splice(newIndex, 0, validator);\n                        nextMember = newIndex === group.members.length - 1 ? address_1.NULL_ADDRESS : group.members[newIndex + 1];\n                        prevMember = newIndex === 0 ? address_1.NULL_ADDRESS : group.members[newIndex - 1];\n                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.kit.connection, this.contract.methods.reorderMember(validator, nextMember, prevMember))];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieves ValidatorRewards for epochNumber.\n     * @param epochNumber The epoch to retrieve ValidatorRewards at.\n     */\n    ValidatorsWrapper.prototype.getValidatorRewards = function (epochNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockNumber, events, validator, validatorGroup;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.kit.getLastBlockNumberForEpoch(epochNumber)];\n                    case 1:\n                        blockNumber = _a.sent();\n                        return [4 /*yield*/, this.getPastEvents('ValidatorEpochPaymentDistributed', {\n                                fromBlock: blockNumber,\n                                toBlock: blockNumber,\n                            })];\n                    case 2:\n                        events = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(10, events, function (e) {\n                                return _this.getValidator(e.returnValues.validator);\n                            })];\n                    case 3:\n                        validator = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(10, events, function (e) {\n                                return _this.getValidatorGroup(e.returnValues.group, false);\n                            })];\n                    case 4:\n                        validatorGroup = _a.sent();\n                        return [2 /*return*/, events.map(function (e, index) { return ({\n                                epochNumber: epochNumber,\n                                validator: validator[index],\n                                validatorPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.validatorPayment),\n                                group: validatorGroup[index],\n                                groupPayment: (0, BaseWrapper_1.valueToBigNumber)(e.returnValues.groupPayment),\n                            }); })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current set of validator signer addresses\n     */\n    ValidatorsWrapper.prototype.currentSignerSet = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var n, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = BaseWrapper_1.valueToInt;\n                        return [4 /*yield*/, this.contract.methods.numberValidatorsInCurrentSet().call()];\n                    case 1:\n                        n = _a.apply(void 0, [_b.sent()]);\n                        return [2 /*return*/, (0, async_1.concurrentMap)(5, (0, collections_1.zeroRange)(n), function (idx) {\n                                return _this.contract.methods.validatorSignerAddressFromCurrentSet(idx).call();\n                            })];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the current set of validator signer and account addresses\n     */\n    ValidatorsWrapper.prototype.currentValidatorAccountsSet = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var signerAddresses, accountAddresses;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.currentSignerSet()];\n                    case 1:\n                        signerAddresses = _a.sent();\n                        return [4 /*yield*/, (0, async_1.concurrentMap)(5, signerAddresses, function (signer) {\n                                return _this.validatorSignerToAccount(signer);\n                            })];\n                    case 2:\n                        accountAddresses = _a.sent();\n                        return [2 /*return*/, (0, collections_1.zip)(function (signer, account) { return ({ signer: signer, account: account }); }, signerAddresses, accountAddresses)];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the group membership for validator account.\n     * @param account Address of validator account to retrieve group membership for.\n     * @param blockNumber Block number to retrieve group membership at.\n     * @return Group and membership history index for `validator`.\n     */\n    ValidatorsWrapper.prototype.getValidatorMembershipHistoryIndex = function (account, blockNumber) {\n        return __awaiter(this, void 0, void 0, function () {\n            var blockEpoch, _a, _b, _c, membershipHistory, historyIndex, group;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _b = (_a = this.kit).getEpochNumberOfBlock;\n                        _c = blockNumber;\n                        if (_c) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.kit.connection.getBlockNumber()];\n                    case 1:\n                        _c = (_d.sent());\n                        _d.label = 2;\n                    case 2: return [4 /*yield*/, _b.apply(_a, [_c])];\n                    case 3:\n                        blockEpoch = _d.sent();\n                        return [4 /*yield*/, this.getValidatorMembershipHistory(account)];\n                    case 4:\n                        membershipHistory = _d.sent();\n                        historyIndex = this.findValidatorMembershipHistoryIndex(blockEpoch, membershipHistory);\n                        group = membershipHistory[historyIndex].group;\n                        return [2 /*return*/, { group: group, historyIndex: historyIndex }];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the index into `history` for `epoch`.\n     * @param epoch The needle.\n     * @param history The haystack.\n     * @return Index for epoch or -1.\n     */\n    ValidatorsWrapper.prototype.findValidatorMembershipHistoryIndex = function (epoch, history) {\n        var revIndex = history\n            .slice()\n            .reverse()\n            .findIndex(function (x) { return x.epoch <= epoch; });\n        return revIndex < 0 ? -1 : history.length - revIndex - 1;\n    };\n    return ValidatorsWrapper;\n}(BaseWrapper_1.BaseWrapper));\nexports.ValidatorsWrapper = ValidatorsWrapper;\n//# sourceMappingURL=Validators.js.map"]},"metadata":{},"sourceType":"script"}