{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LedgerSigner = void 0;\n\nvar address_1 = require(\"@celo/base/lib/address\");\n\nvar sign_typed_data_utils_1 = require(\"@celo/utils/lib/sign-typed-data-utils\");\n\nvar errors_1 = require(\"@ledgerhq/errors\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar ethUtil = __importStar(require(\"ethereumjs-util\"));\n\nvar ledger_utils_1 = require(\"./ledger-utils\");\n\nvar ledger_wallet_1 = require(\"./ledger-wallet\");\n\nvar tokens_1 = require(\"./tokens\");\n\nvar debug = (0, debug_1.default)('kit:wallet:ledger');\nvar CELO_APP_ACCEPTS_CONTRACT_DATA_FROM_VERSION = '1.0.2';\n/**\n * Signs the EVM transaction with a Ledger device\n */\n\nvar LedgerSigner =\n/** @class */\nfunction () {\n  function LedgerSigner(ledger, derivationPath, ledgerAddressValidation, appConfiguration) {\n    if (appConfiguration === void 0) {\n      appConfiguration = {\n        arbitraryDataEnabled: 0,\n        version: '0.0.0'\n      };\n    }\n\n    this.validated = false;\n    this.ledger = ledger;\n    this.derivationPath = derivationPath;\n    this.ledgerAddressValidation = ledgerAddressValidation;\n    this.appConfiguration = appConfiguration;\n  }\n\n  LedgerSigner.prototype.getNativeKey = function () {\n    return this.derivationPath;\n  };\n\n  LedgerSigner.prototype.signTransaction = function (addToV, encodedTx) {\n    return __awaiter(this, void 0, void 0, function () {\n      var validatedDerivationPath, signature, rv, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.getValidatedDerivationPath()];\n\n          case 1:\n            validatedDerivationPath = _a.sent();\n            return [4\n            /*yield*/\n            , this.checkForKnownToken(encodedTx)];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.ledger.signTransaction(validatedDerivationPath, (0, address_1.trimLeading0x)(encodedTx.rlpEncode) // the ledger requires the rlpEncode without the leading 0x\n            ) // EIP155 support. check/recalc signature v value.\n            ];\n\n          case 3:\n            signature = _a.sent();\n            rv = parseInt(signature.v, 16); // tslint:disable-next-line: no-bitwise\n\n            if (rv !== addToV && (rv & addToV) !== rv) {\n              addToV += 1; // add signature v bit.\n            }\n\n            signature.v = addToV.toString(10);\n            return [2\n            /*return*/\n            , {\n              v: signature.v,\n              r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.r)),\n              s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.s))\n            }];\n\n          case 4:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof errors_1.TransportStatusError) {\n              // The Ledger fails if it doesn't know the feeCurrency\n              if (error_1.statusCode === 27264 && error_1.statusText === 'INCORRECT_DATA') {\n                debug('Possible invalid feeCurrency field');\n                throw new Error('ledger-signer@signTransaction: Incorrect Data. Verify that the feeCurrency is a valid one');\n              } else {\n                (0, ledger_utils_1.transportErrorFriendlyMessage)(error_1);\n              }\n            }\n\n            throw error_1;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.signPersonalMessage = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var signature, _a, _b, error_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 3,, 4]);\n\n            _b = (_a = this.ledger).signPersonalMessage;\n            return [4\n            /*yield*/\n            , this.getValidatedDerivationPath()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, [_c.sent(), (0, address_1.trimLeading0x)(data)])];\n\n          case 2:\n            signature = _c.sent();\n            return [2\n            /*return*/\n            , {\n              v: signature.v,\n              r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.r)),\n              s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.s))\n            }];\n\n          case 3:\n            error_2 = _c.sent();\n\n            if (error_2 instanceof errors_1.TransportStatusError) {\n              (0, ledger_utils_1.transportErrorFriendlyMessage)(error_2);\n            }\n\n            throw error_2;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.signTypedData = function (typedData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var domainSeparator, hashStructMessage, sig, _a, _b, error_3;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 3,, 4]);\n\n            domainSeparator = (0, sign_typed_data_utils_1.structHash)('EIP712Domain', typedData.domain, typedData.types);\n            hashStructMessage = (0, sign_typed_data_utils_1.structHash)(typedData.primaryType, typedData.message, typedData.types);\n            _b = (_a = this.ledger).signEIP712HashedMessage;\n            return [4\n            /*yield*/\n            , this.getValidatedDerivationPath()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, [_c.sent(), domainSeparator, hashStructMessage])];\n\n          case 2:\n            sig = _c.sent();\n            return [2\n            /*return*/\n            , {\n              v: parseInt(sig.v, 10),\n              r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(sig.r)),\n              s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(sig.s))\n            }];\n\n          case 3:\n            error_3 = _c.sent();\n\n            if (error_3 instanceof errors_1.TransportStatusError) {\n              (0, ledger_utils_1.transportErrorFriendlyMessage)(error_3);\n            }\n\n            throw error_3;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.getValidatedDerivationPath = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.validationRequired()) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.ledger.getAddress(this.derivationPath, true)];\n\n          case 1:\n            _a.sent();\n\n            this.validated = true;\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this.derivationPath];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.validationRequired = function () {\n    switch (this.ledgerAddressValidation) {\n      case ledger_wallet_1.AddressValidation.never:\n        {\n          return false;\n        }\n\n      case ledger_wallet_1.AddressValidation.everyTransaction:\n        {\n          return true;\n        }\n\n      case ledger_wallet_1.AddressValidation.firstTransactionPerAddress:\n        {\n          return !this.validated;\n        }\n\n      case ledger_wallet_1.AddressValidation.initializationOnly:\n        {\n          // Already initialized, so no need to validate in this state\n          return false;\n        }\n\n      default:\n        {\n          throw new Error('ledger-signer@validationRequired: invalid ledgerValidation value');\n        }\n    }\n  };\n  /**\n   * Display ERC20 info on ledger if contract is well known\n   * @param rlpEncoded Encoded transaction\n   */\n\n\n  LedgerSigner.prototype.checkForKnownToken = function (rlpEncoded) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tokenInfo, feeTokenInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!((0, tokens_1.compareLedgerAppVersions)(this.appConfiguration.version, CELO_APP_ACCEPTS_CONTRACT_DATA_FROM_VERSION) >= 0)) return [3\n            /*break*/\n            , 4];\n            tokenInfo = (0, tokens_1.tokenInfoByAddressAndChainId)(rlpEncoded.transaction.to, rlpEncoded.transaction.chainId);\n            if (!tokenInfo) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.ledger.provideERC20TokenInformation(tokenInfo)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            if (!(rlpEncoded.transaction.feeCurrency && rlpEncoded.transaction.feeCurrency !== '0x')) return [3\n            /*break*/\n            , 4];\n            feeTokenInfo = (0, tokens_1.tokenInfoByAddressAndChainId)(rlpEncoded.transaction.feeCurrency, rlpEncoded.transaction.chainId);\n            if (!feeTokenInfo) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.ledger.provideERC20TokenInformation(feeTokenInfo)];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  LedgerSigner.prototype.decrypt = function (_ciphertext) {\n    throw new Error('Decryption operation is not supported on this signer'); // To make the compiler happy\n\n    return Promise.resolve(_ciphertext);\n  };\n\n  LedgerSigner.prototype.computeSharedSecret = function (_publicKey) {\n    throw new Error('Not implemented');\n    return Promise.resolve(Buffer.from([]));\n  };\n\n  return LedgerSigner;\n}();\n\nexports.LedgerSigner = LedgerSigner;","map":{"version":3,"sources":["../src/ledger-signer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LedgerSigner = void 0;\nvar address_1 = require(\"@celo/base/lib/address\");\nvar sign_typed_data_utils_1 = require(\"@celo/utils/lib/sign-typed-data-utils\");\nvar errors_1 = require(\"@ledgerhq/errors\");\nvar debug_1 = __importDefault(require(\"debug\"));\nvar ethUtil = __importStar(require(\"ethereumjs-util\"));\nvar ledger_utils_1 = require(\"./ledger-utils\");\nvar ledger_wallet_1 = require(\"./ledger-wallet\");\nvar tokens_1 = require(\"./tokens\");\nvar debug = (0, debug_1.default)('kit:wallet:ledger');\nvar CELO_APP_ACCEPTS_CONTRACT_DATA_FROM_VERSION = '1.0.2';\n/**\n * Signs the EVM transaction with a Ledger device\n */\nvar LedgerSigner = /** @class */ (function () {\n    function LedgerSigner(ledger, derivationPath, ledgerAddressValidation, appConfiguration) {\n        if (appConfiguration === void 0) { appConfiguration = {\n            arbitraryDataEnabled: 0,\n            version: '0.0.0',\n        }; }\n        this.validated = false;\n        this.ledger = ledger;\n        this.derivationPath = derivationPath;\n        this.ledgerAddressValidation = ledgerAddressValidation;\n        this.appConfiguration = appConfiguration;\n    }\n    LedgerSigner.prototype.getNativeKey = function () {\n        return this.derivationPath;\n    };\n    LedgerSigner.prototype.signTransaction = function (addToV, encodedTx) {\n        return __awaiter(this, void 0, void 0, function () {\n            var validatedDerivationPath, signature, rv, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 4, , 5]);\n                        return [4 /*yield*/, this.getValidatedDerivationPath()];\n                    case 1:\n                        validatedDerivationPath = _a.sent();\n                        return [4 /*yield*/, this.checkForKnownToken(encodedTx)];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.ledger.signTransaction(validatedDerivationPath, (0, address_1.trimLeading0x)(encodedTx.rlpEncode) // the ledger requires the rlpEncode without the leading 0x\n                            )\n                            // EIP155 support. check/recalc signature v value.\n                        ];\n                    case 3:\n                        signature = _a.sent();\n                        rv = parseInt(signature.v, 16);\n                        // tslint:disable-next-line: no-bitwise\n                        if (rv !== addToV && (rv & addToV) !== rv) {\n                            addToV += 1; // add signature v bit.\n                        }\n                        signature.v = addToV.toString(10);\n                        return [2 /*return*/, {\n                                v: signature.v,\n                                r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.r)),\n                                s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.s)),\n                            }];\n                    case 4:\n                        error_1 = _a.sent();\n                        if (error_1 instanceof errors_1.TransportStatusError) {\n                            // The Ledger fails if it doesn't know the feeCurrency\n                            if (error_1.statusCode === 27264 && error_1.statusText === 'INCORRECT_DATA') {\n                                debug('Possible invalid feeCurrency field');\n                                throw new Error('ledger-signer@signTransaction: Incorrect Data. Verify that the feeCurrency is a valid one');\n                            }\n                            else {\n                                (0, ledger_utils_1.transportErrorFriendlyMessage)(error_1);\n                            }\n                        }\n                        throw error_1;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    LedgerSigner.prototype.signPersonalMessage = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var signature, _a, _b, error_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 3, , 4]);\n                        _b = (_a = this.ledger).signPersonalMessage;\n                        return [4 /*yield*/, this.getValidatedDerivationPath()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent(), (0, address_1.trimLeading0x)(data)])];\n                    case 2:\n                        signature = _c.sent();\n                        return [2 /*return*/, {\n                                v: signature.v,\n                                r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.r)),\n                                s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(signature.s)),\n                            }];\n                    case 3:\n                        error_2 = _c.sent();\n                        if (error_2 instanceof errors_1.TransportStatusError) {\n                            (0, ledger_utils_1.transportErrorFriendlyMessage)(error_2);\n                        }\n                        throw error_2;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    LedgerSigner.prototype.signTypedData = function (typedData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var domainSeparator, hashStructMessage, sig, _a, _b, error_3;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _c.trys.push([0, 3, , 4]);\n                        domainSeparator = (0, sign_typed_data_utils_1.structHash)('EIP712Domain', typedData.domain, typedData.types);\n                        hashStructMessage = (0, sign_typed_data_utils_1.structHash)(typedData.primaryType, typedData.message, typedData.types);\n                        _b = (_a = this.ledger).signEIP712HashedMessage;\n                        return [4 /*yield*/, this.getValidatedDerivationPath()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, [_c.sent(), domainSeparator,\n                            hashStructMessage])];\n                    case 2:\n                        sig = _c.sent();\n                        return [2 /*return*/, {\n                                v: parseInt(sig.v, 10),\n                                r: ethUtil.toBuffer((0, address_1.ensureLeading0x)(sig.r)),\n                                s: ethUtil.toBuffer((0, address_1.ensureLeading0x)(sig.s)),\n                            }];\n                    case 3:\n                        error_3 = _c.sent();\n                        if (error_3 instanceof errors_1.TransportStatusError) {\n                            (0, ledger_utils_1.transportErrorFriendlyMessage)(error_3);\n                        }\n                        throw error_3;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    LedgerSigner.prototype.getValidatedDerivationPath = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.validationRequired()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.ledger.getAddress(this.derivationPath, true)];\n                    case 1:\n                        _a.sent();\n                        this.validated = true;\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, this.derivationPath];\n                }\n            });\n        });\n    };\n    LedgerSigner.prototype.validationRequired = function () {\n        switch (this.ledgerAddressValidation) {\n            case ledger_wallet_1.AddressValidation.never: {\n                return false;\n            }\n            case ledger_wallet_1.AddressValidation.everyTransaction: {\n                return true;\n            }\n            case ledger_wallet_1.AddressValidation.firstTransactionPerAddress: {\n                return !this.validated;\n            }\n            case ledger_wallet_1.AddressValidation.initializationOnly: {\n                // Already initialized, so no need to validate in this state\n                return false;\n            }\n            default: {\n                throw new Error('ledger-signer@validationRequired: invalid ledgerValidation value');\n            }\n        }\n    };\n    /**\n     * Display ERC20 info on ledger if contract is well known\n     * @param rlpEncoded Encoded transaction\n     */\n    LedgerSigner.prototype.checkForKnownToken = function (rlpEncoded) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tokenInfo, feeTokenInfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!((0, tokens_1.compareLedgerAppVersions)(this.appConfiguration.version, CELO_APP_ACCEPTS_CONTRACT_DATA_FROM_VERSION) >= 0)) return [3 /*break*/, 4];\n                        tokenInfo = (0, tokens_1.tokenInfoByAddressAndChainId)(rlpEncoded.transaction.to, rlpEncoded.transaction.chainId);\n                        if (!tokenInfo) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.ledger.provideERC20TokenInformation(tokenInfo)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        if (!(rlpEncoded.transaction.feeCurrency && rlpEncoded.transaction.feeCurrency !== '0x')) return [3 /*break*/, 4];\n                        feeTokenInfo = (0, tokens_1.tokenInfoByAddressAndChainId)(rlpEncoded.transaction.feeCurrency, rlpEncoded.transaction.chainId);\n                        if (!feeTokenInfo) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.ledger.provideERC20TokenInformation(feeTokenInfo)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    LedgerSigner.prototype.decrypt = function (_ciphertext) {\n        throw new Error('Decryption operation is not supported on this signer');\n        // To make the compiler happy\n        return Promise.resolve(_ciphertext);\n    };\n    LedgerSigner.prototype.computeSharedSecret = function (_publicKey) {\n        throw new Error('Not implemented');\n        return Promise.resolve(Buffer.from([]));\n    };\n    return LedgerSigner;\n}());\nexports.LedgerSigner = LedgerSigner;\n//# sourceMappingURL=ledger-signer.js.map"]},"metadata":{},"sourceType":"script"}