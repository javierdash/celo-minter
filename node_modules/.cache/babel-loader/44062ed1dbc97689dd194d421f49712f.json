{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionResult = exports.toTxResult = void 0;\n\nvar future_1 = require(\"@celo/base/lib/future\");\n\nvar debug_1 = __importDefault(require(\"debug\"));\n\nvar debug = (0, debug_1.default)('connection:tx:result');\n/**\n * Transforms a `PromiEvent` to a `TransactionResult`.\n */\n\nfunction toTxResult(pe) {\n  return new TransactionResult(pe);\n}\n\nexports.toTxResult = toTxResult;\n/**\n * Replacement interface for web3's `PromiEvent`. Instead of emiting events\n * to signal different stages, eveything is exposed as a promise. Which ends\n * up being nicer when doing promise/async based programming.\n */\n\nvar TransactionResult =\n/** @class */\nfunction () {\n  function TransactionResult(pe) {\n    var _this = this;\n\n    this.hashFuture = new future_1.Future();\n    this.receiptFuture = new future_1.Future();\n    pe.on('transactionHash', function (hash) {\n      debug('hash: %s', hash);\n\n      _this.hashFuture.resolve(hash);\n    }).on('receipt', function (receipt) {\n      debug('receipt: %O', receipt);\n\n      _this.receiptFuture.resolve(receipt);\n    }).on('error', function (error, receipt) {\n      if (!receipt) {\n        debug('send-error: %o', error);\n\n        _this.hashFuture.reject(error);\n      } else {\n        debug('mining-error: %o, %O', error, receipt);\n      }\n\n      _this.receiptFuture.reject(error);\n    });\n  }\n  /** Get (& wait for) transaction hash */\n\n\n  TransactionResult.prototype.getHash = function () {\n    var _this = this;\n\n    return this.hashFuture.wait().catch(function (err) {\n      // if hashFuture fails => receiptFuture also fails\n      // we wait for it here; so not UnhandlePromise error occurrs\n      _this.receiptFuture.wait().catch(function () {// ignore\n      });\n\n      throw err;\n    });\n  };\n  /** Get (& wait for) transaction receipt */\n\n\n  TransactionResult.prototype.waitReceipt = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Make sure `getHash()` promise is consumed\n            return [4\n            /*yield*/\n            , this.getHash()];\n\n          case 1:\n            // Make sure `getHash()` promise is consumed\n            _a.sent();\n\n            return [2\n            /*return*/\n            , this.receiptFuture.wait()];\n        }\n      });\n    });\n  };\n\n  return TransactionResult;\n}();\n\nexports.TransactionResult = TransactionResult;","map":{"version":3,"sources":["../../src/utils/tx-result.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAM,KAAK,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAa,sBAAb,CAAd;AAEA;;AAEG;;AACH,SAAgB,UAAhB,CAA2B,EAA3B,EAA8C;AAC5C,SAAO,IAAI,iBAAJ,CAAsB,EAAtB,CAAP;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA;AAIA;;;;AAIG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAIE,WAAA,iBAAA,CAAY,EAAZ,EAA+B;AAA/B,QAAA,KAAA,GAAA,IAAA;;AAHQ,SAAA,UAAA,GAAa,IAAI,QAAA,CAAA,MAAJ,EAAb;AACA,SAAA,aAAA,GAAgB,IAAI,QAAA,CAAA,MAAJ,EAAhB;AAGN,IAAA,EAAE,CAAC,EAAH,CAAM,iBAAN,EAAyB,UAAC,IAAD,EAAa;AACpC,MAAA,KAAK,CAAC,UAAD,EAAa,IAAb,CAAL;;AACA,MAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB,CAAwB,IAAxB;AACD,KAHD,EAIG,EAJH,CAIM,SAJN,EAIiB,UAAC,OAAD,EAAuB;AACpC,MAAA,KAAK,CAAC,aAAD,EAAgB,OAAhB,CAAL;;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,OAAnB,CAA2B,OAA3B;AACD,KAPH,EASG,EATH,CASM,OATN,EASgB,UAAC,KAAD,EAAa,OAAb,EAA2C;AACvD,UAAI,CAAC,OAAL,EAAc;AACZ,QAAA,KAAK,CAAC,gBAAD,EAAmB,KAAnB,CAAL;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,KAAvB;AACD,OAHD,MAGO;AACL,QAAA,KAAK,CAAC,sBAAD,EAAyB,KAAzB,EAAgC,OAAhC,CAAL;AACD;;AACD,MAAA,KAAI,CAAC,aAAL,CAAmB,MAAnB,CAA0B,KAA1B;AACD,KAjBH;AAkBD;AAED;;;AACA,EAAA,iBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,KAAK,UAAL,CAAgB,IAAhB,GAAuB,KAAvB,CAA6B,UAAC,GAAD,EAAI;AACtC;AACA;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,IAAnB,GAA0B,KAA1B,CAAgC,YAAA,CAC9B;AACD,OAFD;;AAGA,YAAM,GAAN;AACD,KAPM,CAAP;AAQD,GATD;AAWA;;;AACM,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAN,YAAA;;;;;AACE;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,OAAL,EAAN,CAAA;;;AADA;AACA,YAAA,EAAA,CAAA,IAAA;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,aAAL,CAAmB,IAAnB,EAAP,CAAA;;;;AACD,GALK;;AAMR,SAAA,iBAAA;AAAC,CA5CD,EAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionResult = exports.toTxResult = void 0;\nvar future_1 = require(\"@celo/base/lib/future\");\nvar debug_1 = __importDefault(require(\"debug\"));\nvar debug = (0, debug_1.default)('connection:tx:result');\n/**\n * Transforms a `PromiEvent` to a `TransactionResult`.\n */\nfunction toTxResult(pe) {\n    return new TransactionResult(pe);\n}\nexports.toTxResult = toTxResult;\n/**\n * Replacement interface for web3's `PromiEvent`. Instead of emiting events\n * to signal different stages, eveything is exposed as a promise. Which ends\n * up being nicer when doing promise/async based programming.\n */\nvar TransactionResult = /** @class */ (function () {\n    function TransactionResult(pe) {\n        var _this = this;\n        this.hashFuture = new future_1.Future();\n        this.receiptFuture = new future_1.Future();\n        pe.on('transactionHash', function (hash) {\n            debug('hash: %s', hash);\n            _this.hashFuture.resolve(hash);\n        })\n            .on('receipt', function (receipt) {\n            debug('receipt: %O', receipt);\n            _this.receiptFuture.resolve(receipt);\n        })\n            .on('error', (function (error, receipt) {\n            if (!receipt) {\n                debug('send-error: %o', error);\n                _this.hashFuture.reject(error);\n            }\n            else {\n                debug('mining-error: %o, %O', error, receipt);\n            }\n            _this.receiptFuture.reject(error);\n        }));\n    }\n    /** Get (& wait for) transaction hash */\n    TransactionResult.prototype.getHash = function () {\n        var _this = this;\n        return this.hashFuture.wait().catch(function (err) {\n            // if hashFuture fails => receiptFuture also fails\n            // we wait for it here; so not UnhandlePromise error occurrs\n            _this.receiptFuture.wait().catch(function () {\n                // ignore\n            });\n            throw err;\n        });\n    };\n    /** Get (& wait for) transaction receipt */\n    TransactionResult.prototype.waitReceipt = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: \n                    // Make sure `getHash()` promise is consumed\n                    return [4 /*yield*/, this.getHash()];\n                    case 1:\n                        // Make sure `getHash()` promise is consumed\n                        _a.sent();\n                        return [2 /*return*/, this.receiptFuture.wait()];\n                }\n            });\n        });\n    };\n    return TransactionResult;\n}());\nexports.TransactionResult = TransactionResult;\n//# sourceMappingURL=tx-result.js.map"]},"metadata":{},"sourceType":"script"}