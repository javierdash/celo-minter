{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useWalletVersion = void 0; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nfunction useWalletVersion(walletId) {\n  return 1;\n}\n\nexports.useWalletVersion = useWalletVersion; // Uncomment with WCV2 support\n// const VERSION_OVERRIDE: Record<string, number> = Object.freeze({\n//   [WalletIds.Valora]: 1,\n//   [WalletIds.CeloWallet]: 2,\n//   [WalletIds.CeloTerminal]: 2,\n//   [WalletIds.CeloDance]: 2,\n// });\n//\n// export function useWalletVersion(walletId?: WalletIds): number | null {\n//   // TODO: decide if to use v1 or v2 as a default for unknown wallectconnect? Or if to expose both\n//   const [version, setVersion] = useState<number | null>(walletId ? null : 2);\n//\n//   useEffect(() => {\n//     if (!walletId) {\n//       return;\n//     }\n//\n//     void fetchWCWallets().then((celoWallets) => {\n//       const wallet = celoWallets.find((appEntry) => appEntry.id === walletId);\n//       if (wallet) {\n//         const versionFromRegistry = Math.max(\n//           ...wallet.versions.map((_) => parseInt(_, 10))\n//         );\n//\n//         if (\n//           VERSION_OVERRIDE[walletId] &&\n//           VERSION_OVERRIDE[walletId] !== versionFromRegistry\n//         ) {\n//           console.warn(\n//             `Override version found in registry(${versionFromRegistry}) by hard-coded version(${VERSION_OVERRIDE[walletId]}) for ${wallet.name}`\n//           );\n//           setVersion(VERSION_OVERRIDE[walletId]);\n//         } else {\n//           setVersion(versionFromRegistry);\n//         }\n//       } else if (!VERSION_OVERRIDE[walletId]) {\n//         throw new Error('Unknown wallectconnect wallet');\n//       }\n//     });\n//   }, [walletId]);\n//\n//   return version;\n// }","map":{"version":3,"sources":["../../src/utils/useWalletVersion.ts"],"names":[],"mappings":";;;;;mCAKA;;AACA,SAAgB,gBAAhB,CAAiC,QAAjC,EAAqD;AACnD,SAAO,CAAP;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useWalletVersion = void 0;\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction useWalletVersion(walletId) {\n    return 1;\n}\nexports.useWalletVersion = useWalletVersion;\n// Uncomment with WCV2 support\n// const VERSION_OVERRIDE: Record<string, number> = Object.freeze({\n//   [WalletIds.Valora]: 1,\n//   [WalletIds.CeloWallet]: 2,\n//   [WalletIds.CeloTerminal]: 2,\n//   [WalletIds.CeloDance]: 2,\n// });\n//\n// export function useWalletVersion(walletId?: WalletIds): number | null {\n//   // TODO: decide if to use v1 or v2 as a default for unknown wallectconnect? Or if to expose both\n//   const [version, setVersion] = useState<number | null>(walletId ? null : 2);\n//\n//   useEffect(() => {\n//     if (!walletId) {\n//       return;\n//     }\n//\n//     void fetchWCWallets().then((celoWallets) => {\n//       const wallet = celoWallets.find((appEntry) => appEntry.id === walletId);\n//       if (wallet) {\n//         const versionFromRegistry = Math.max(\n//           ...wallet.versions.map((_) => parseInt(_, 10))\n//         );\n//\n//         if (\n//           VERSION_OVERRIDE[walletId] &&\n//           VERSION_OVERRIDE[walletId] !== versionFromRegistry\n//         ) {\n//           console.warn(\n//             `Override version found in registry(${versionFromRegistry}) by hard-coded version(${VERSION_OVERRIDE[walletId]}) for ${wallet.name}`\n//           );\n//           setVersion(VERSION_OVERRIDE[walletId]);\n//         } else {\n//           setVersion(versionFromRegistry);\n//         }\n//       } else if (!VERSION_OVERRIDE[walletId]) {\n//         throw new Error('Unknown wallectconnect wallet');\n//       }\n//     });\n//   }, [walletId]);\n//\n//   return version;\n// }\n//# sourceMappingURL=useWalletVersion.js.map"]},"metadata":{},"sourceType":"script"}