{"ast":null,"code":"var _jsxFileName = \"/Users/Lucy/PROYECTOS/celo-react-boilerplate/src/components/minter/nfts/index.js\",\n    _s = $RefreshSig$();\n\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport { getNfts, createNft, fetchNftContractOwner } from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NftList = _ref => {\n  _s();\n\n  let {\n    minterContract,\n    name\n  } = _ref;\n\n  /* performActions : used to run smart contract interactions in order\n  *  address : fetch the address of the connected wallet\n  */\n  const {\n    performActions,\n    address\n  } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true); // fetch all nfts from the smart contract\n\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({\n        error\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async data => {\n    try {\n      setLoading(true); // create an nft functionality\n\n      await createNft(minterContract, performActions, data);\n      toast( /*#__PURE__*/_jsxDEV(NotificationSuccess, {\n        text: \"Updating NFT list....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this));\n      getAssets();\n    } catch (error) {\n      console.log({\n        error\n      });\n      toast( /*#__PURE__*/_jsxDEV(NotificationError, {\n        text: \"Failed to create an NFT.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async minterContract => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n\n    setNftOwner(_address);\n  }, []);\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n\n  if (address) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: !loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"d-flex justify-content-between align-items-center mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"fs-4 fw-bold mb-0\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), nftOwner === address ? /*#__PURE__*/_jsxDEV(AddNfts, {\n            save: addNft,\n            address: address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          xs: 1,\n          sm: 2,\n          lg: 3,\n          className: \"g-3  mb-5 g-xl-4 g-xxl-5\",\n          children: nfts.map(_nft => /*#__PURE__*/_jsxDEV(Nft, {\n            nft: { ..._nft\n            }\n          }, _nft.index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)\n    }, void 0, false);\n  }\n\n  return null;\n};\n\n_s(NftList, \"mlyMpNcWGNDGFgV/IwQ7jUMO9Mo=\", false, function () {\n  return [useContractKit];\n});\n\n_c = NftList;\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired\n};\nNftList.defaultProps = {\n  minterContract: null\n};\nexport default NftList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NftList\");","map":{"version":3,"sources":["/Users/Lucy/PROYECTOS/celo-react-boilerplate/src/components/minter/nfts/index.js"],"names":["useContractKit","React","useEffect","useState","useCallback","toast","PropTypes","AddNfts","Nft","Loader","NotificationSuccess","NotificationError","getNfts","createNft","fetchNftContractOwner","Row","NftList","minterContract","name","performActions","address","nfts","setNfts","loading","setLoading","nftOwner","setNftOwner","getAssets","allNfts","error","console","log","addNft","data","fetchContractOwner","_address","map","_nft","index","propTypes","instanceOf","Object","updateBalance","func","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  createNft,\n  fetchNftContractOwner,\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({minterContract, name}) => {\n\n  /* performActions : used to run smart contract interactions in order\n  *  address : fetch the address of the connected wallet\n  */\n  const {performActions, address} = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // fetch all nfts from the smart contract\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\"/>);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\n\n              {/* give the add NFT permission to user who deployed the NFT smart contract */}\n              {nftOwner === address ? (\n                  <AddNfts save={addNft} address={address}/>\n              ) : null}\n\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\n\n              {/* display all NFTs */}\n              {nfts.map((_nft) => (\n                  <Nft\n                      key={_nft.index}\n                      nft={{\n                        ..._nft,\n                      }}\n                  />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;"]},"metadata":{},"sourceType":"module"}